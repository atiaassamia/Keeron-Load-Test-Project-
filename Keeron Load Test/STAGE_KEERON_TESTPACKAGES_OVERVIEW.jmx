<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">keeron.selisestage.com/test-packages/math-test-english</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <stringProp name="HTTPSampler.domain">keeron.selisestage.com/test-packages/math-test-english</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-1" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/test-packages/math-test-english</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">none</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-2" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/test-packages/1x</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">no-cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">image</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-3" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/live-courses.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-4" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/test-packages.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-7" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/courses.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-8" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/business-keeron/cms/campaign/view</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-5" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/identity/v25/identity/token</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                    <stringProp name="Argument.value">refresh_token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">F7A99120-25DE-432A-92CA-9A108A62721C</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="refresh_token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">refresh_token</stringProp>
                    <stringProp name="Argument.value">b7eccd98cf1f41d48ebb0375bfbd90b3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-10" enabled="true">
              <stringProp name="HTTPSampler.domain">www.googletagmanager.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/gtag/js</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">id</stringProp>
                    <stringProp name="Argument.value">G-EHX2PZ128D</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="l" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">l</stringProp>
                    <stringProp name="Argument.value">dataLayer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="cx" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cx</stringProp>
                    <stringProp name="Argument.value">c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">no-cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">script</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-9" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/business-keeron/package/view</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">url</stringProp>
                    <stringProp name="Argument.value">math-test-english</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-16" enabled="true">
              <stringProp name="HTTPSampler.domain">www.google.com.bd</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/ads/ga-audiences</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">v</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">sr</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="slf_rd" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">slf_rd</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="_r" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_r</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tid</stringProp>
                    <stringProp name="Argument.value">G-EHX2PZ128D</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="cid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cid</stringProp>
                    <stringProp name="Argument.value">1305574686.1721140958</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gtm" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gtm</stringProp>
                    <stringProp name="Argument.value">45je4850v9123672806z89122832445za200zb9122832445</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="aip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">aip</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dma" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">dma</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="gcd" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">gcd</stringProp>
                    <stringProp name="Argument.value">13l3l3l3l1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="npa" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">npa</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="frm" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">frm</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tag_exp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tag_exp</stringProp>
                    <stringProp name="Argument.value">95250753</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="z" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">z</stringProp>
                    <stringProp name="Argument.value">2060467300</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">no-cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">image</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-11" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/study-resources.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-14" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/about.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-13" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/events.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-15" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/identity/v25/identity/token</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                    <stringProp name="Argument.value">refresh_token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">F7A99120-25DE-432A-92CA-9A108A62721C</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="refresh_token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">refresh_token</stringProp>
                    <stringProp name="Argument.value">b7eccd98cf1f41d48ebb0375bfbd90b3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-18" enabled="true">
              <stringProp name="HTTPSampler.domain">analytics.google.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/g/collect?v=2&amp;tid=G-EHX2PZ128D&amp;gtm=45je4850v9123672806z89122832445za200zb9122832445&amp;_p=1723026022626&amp;_gaz=1&amp;gcd=13l3l3l3l1&amp;npa=0&amp;dma=0&amp;tag_exp=95250753&amp;cid=1305574686.1721140958&amp;ul=en-us&amp;sr=1920x1080&amp;frm=0&amp;pscdl=noapi&amp;_s=1&amp;sid=1723025676&amp;sct=17&amp;seg=1&amp;dl=${scheme}%3A%2F%2Fkeeron.selisestage.com%2Ftest-packages%2Fmath-test-english&amp;dt=Package%20Overview%20%7C%20Keeron&amp;en=page_view&amp;tfd=226570</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">no-cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-12" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/package-enrollment/undefined.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="slug" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">slug</stringProp>
                    <stringProp name="Argument.value">undefined</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-17" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/identity/v25/identity/Authentication/GetLoggedInUser</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="cacheBuster" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cacheBuster</stringProp>
                    <stringProp name="Argument.value">1723026024089</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Expires" elementType="Header">
                    <stringProp name="Header.name">Expires</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache, no-store, must-revalidate, post-check=0, pre-check=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-19" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/tenant/v2/TenantManager/TenantManagerQuery/GetIdentity</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-21" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/blogs.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-20" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/identity/v25/identity/token</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                    <stringProp name="Argument.value">refresh_token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">F7A99120-25DE-432A-92CA-9A108A62721C</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="refresh_token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">refresh_token</stringProp>
                    <stringProp name="Argument.value">b7eccd98cf1f41d48ebb0375bfbd90b3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-22" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/contact-us.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-23" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/business-keeron/cms/campaign/view</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-24" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/refund-policy.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-26" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/affiliate/landing.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-25" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/faq.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-27" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/terms-and-conditions.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-28" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/business-keeron/package/view</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">url</stringProp>
                    <stringProp name="Argument.value">math-test-english</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-29" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/privacy-policy.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-31" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/package-enrollment/70c4e23a-6f11-4a79-808b-3ae6b17ecd86.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="slug" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">slug</stringProp>
                    <stringProp name="Argument.value">70c4e23a-6f11-4a79-808b-3ae6b17ecd86</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-32" enabled="true">
              <stringProp name="HTTPSampler.domain">keeron.selisestage.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/_next/data/JjXMOvoeIU2v012JUTAl9/index.json</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="purpose" elementType="Header">
                    <stringProp name="Header.name">purpose</stringProp>
                    <stringProp name="Header.value">prefetch</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="x-middleware-prefetch" elementType="Header">
                    <stringProp name="Header.name">x-middleware-prefetch</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-nextjs-data" elementType="Header">
                    <stringProp name="Header.name">x-nextjs-data</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-35" enabled="true">
              <stringProp name="HTTPSampler.domain">www.clarity.ms</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tag/ks96b3hjrc</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="ref" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ref</stringProp>
                    <stringProp name="Argument.value">gtm</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">no-cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">script</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-34" enabled="true">
              <stringProp name="HTTPSampler.domain">www.clarity.ms</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tag/ks96b3hjrc</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="ref" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ref</stringProp>
                    <stringProp name="Argument.value">gtm2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">no-cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">script</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-39" enabled="true">
              <stringProp name="HTTPSampler.domain">www.facebook.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/plugins/customer_chat/SDK/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="app_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">app_id</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="attribution" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">attribution</stringProp>
                    <stringProp name="Argument.value">biz_inbox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="channel" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">channel</stringProp>
                    <stringProp name="Argument.value">${scheme}://staticxx.facebook.com/x/connect/xd_arbiter/?version=46#cb=ff3c23d0b182758da&amp;domain=keeron.selisestage.com&amp;is_canvas=false&amp;origin=${scheme}%3A%2F%2Fkeeron.selisestage.com%2Ffe4329657e5785967&amp;relation=parent.parent</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="current_url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">current_url</stringProp>
                    <stringProp name="Argument.value">${scheme}://${host}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="event_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">event_name</stringProp>
                    <stringProp name="Argument.value">chat_plugin_sdk_facade_create</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="is_loaded_by_facade" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">is_loaded_by_facade</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="loading_time" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">loading_time</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="locale" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">locale</stringProp>
                    <stringProp name="Argument.value">en_US</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="log_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">log_id</stringProp>
                    <stringProp name="Argument.value">c35e85a0-c625-48b1-9503-e1909c3f320b</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="page_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">page_id</stringProp>
                    <stringProp name="Argument.value">104043352535894</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="request_time" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">request_time</stringProp>
                    <stringProp name="Argument.value">1723026028429</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sdk" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sdk</stringProp>
                    <stringProp name="Argument.value">joey</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="should_use_new_domain" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">should_use_new_domain</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="suppress_http_code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">suppress_http_code</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-38" enabled="true">
              <stringProp name="HTTPSampler.domain">www.facebook.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/plugins/customer_chat/facade/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="app_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">app_id</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="attribution" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">attribution</stringProp>
                    <stringProp name="Argument.value">biz_inbox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="channel" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">channel</stringProp>
                    <stringProp name="Argument.value">${scheme}://staticxx.facebook.com/x/connect/xd_arbiter/?version=46#cb=ff3c23d0b182758da&amp;domain=keeron.selisestage.com&amp;is_canvas=false&amp;origin=${scheme}%3A%2F%2Fkeeron.selisestage.com%2Ffe4329657e5785967&amp;relation=parent.parent</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="current_url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">current_url</stringProp>
                    <stringProp name="Argument.value">${scheme}://${host}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="is_loaded_by_facade" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">is_loaded_by_facade</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="locale" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">locale</stringProp>
                    <stringProp name="Argument.value">en_US</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="log_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">log_id</stringProp>
                    <stringProp name="Argument.value">c35e85a0-c625-48b1-9503-e1909c3f320b</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="page_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">page_id</stringProp>
                    <stringProp name="Argument.value">104043352535894</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="request_time" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">request_time</stringProp>
                    <stringProp name="Argument.value">1723026028429</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sdk" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sdk</stringProp>
                    <stringProp name="Argument.value">joey</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="should_use_new_domain" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">should_use_new_domain</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="suppress_http_code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">suppress_http_code</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-44" enabled="true">
              <stringProp name="HTTPSampler.domain">r.clarity.ms</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/collect</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.43&quot;,2,111,1025,&quot;ks96b3hjrc&quot;,&quot;1hko1e2&quot;,&quot;11dlr0f&quot;,1,0,0],&quot;a&quot;:[[111,4,1,1903,1203,1903,955,0,0,0,0,0,0],[1136,1,4,[&quot;r.clarity.ms&quot;,&quot;www.facebook.com&quot;]],[1136,0,2,24638,3,2,4,6,5,3,25,6,28,653],[1136,36,6,[124,50]]],&quot;p&quot;:[[124,6,140,4,139,&quot;DIV&quot;,&quot;id=fb-root&quot;,&quot;class= fb_reset&quot;,489,140,[5],&quot;style=position: absolute; top: -10000px; width: 0px; height: 0px;&quot;,490,489,[5],491,3,134,&quot;STYLE&quot;,&quot;type=text/css&quot;,&quot;data-fbcssmodules=css:fb.css.base css:fb.css.dialog css:fb.css.iframewidget css:fb.css.customer_chat_plugin_iframe&quot;,&quot;.fb_hidden { position: absolute; top: -10000px; z-index: 10001; }.fb_reposition { overflow: hidden; position: relative; }.fb_invisible { display: none; }.fb_reset { background: none; border: 0px; border-spacing: 0px; color: rgb(0, 0, 0); cursor: auto; direction: ltr; font-family: \&quot;lucida grande\&quot;, tahoma, verdana, arial, sans-serif; font-size: 11px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 1; margin: 0px; overflow: visible; padding: 0px; text-align: left; text-decoration: none; text-indent: 0px; text-shadow: none; text-transform: none; visibility: visible; white-space: normal; word-spacing: normal; }.fb_reset &gt; div { overflow: hidden; }@keyframes fb_transform {\n0% { opacity: 0; transform: scale(0.95); }\n100% { opacity: 1; transform: scale(1); }\n}.fb_animate { animation: 0.3s forwards fb_transform; }.fb_hidden { position: absolute; top: -10000px; z-index: 10001; }.fb_reposition { overflow: hidden; position: relative; }.fb_invisible { display: none; }.fb_reset { background: none; border: 0px; border-spacing: 0px; color: rgb(0, 0, 0); cursor: auto; direction: ltr; font-family: \&quot;lucida grande\&quot;, tahoma, verdana, arial, sans-serif; font-size: 11px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 1; margin: 0px; overflow: visible; padding: 0px; text-align: left; text-decoration: none; text-indent: 0px; text-shadow: none; text-transform: none; visibility: visible; white-space: normal; word-spacing: normal; }.fb_reset &gt; div { overflow: hidden; }@keyframes fb_transform {\n0% { opacity: 0; transform: scale(0.95); }\n100% { opacity: 1; transform: scale(1); }\n}.fb_animate { animation: 0.3s forwards fb_transform; }.fb_dialog { background: rgba(82, 82, 82, 0.7); position: absolute; top: -10000px; z-index: 10001; }.fb_dialog_advanced { border-radius: 8px; padding: 10px; }.fb_dialog_content { background: rgb(255, 255, 255); color: rgb(55, 55, 55); }.fb_dialog_close_icon { background: transparent url(\&quot;${scheme}://connect.facebook.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png\&quot;) 0px 0px no-repeat; cursor: pointer; display: block; height: 15px; position: absolute; right: 18px; top: 17px; width: 15px; }.fb_dialog_mobile .fb_dialog_close_icon { left: 5px; right: auto; top: 5px; }.fb_dialog_padding { background-color: transparent; position: absolute; width: 1px; z-index: -1; }.fb_dialog_close_icon:hover { background: transparent url(\&quot;${scheme}://connect.facebook.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png\&quot;) 0px -15px no-repeat; }.fb_dialog_close_icon:active { background: transparent url(\&quot;${scheme}://connect.facebook.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png\&quot;) 0px -30px no-repeat; }.fb_dialog_iframe { line-height: 0; }.fb_dialog_content .dialog_title { background: rgb(109, 132, 180); border: 1px solid rgb(54, 88, 153); color: rgb(255, 255, 255); font-size: 14px; font-weight: bold; margin: 0px; }.fb_dialog_content .dialog_title &gt; span { background: url(\&quot;${scheme}://connect.facebook.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif\&quot;) 5px 50% no-repeat; float: left; padding: 5px 0px 7px 26px; }body.fb_hidden { height: 100%; left: 0px; margin: 0px; overflow: visible; position: absolute; top: -10000px; transform: none; width: 100%; }.fb_dialog.fb_dialog_mobile.loading { background: white url(\&quot;${scheme}://connect.facebook.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif\&quot;) 50% 50% no-repeat; min-height: 100%; min-width: 100%; overflow: hidden; position: absolute; top: 0px; z-index: 10001; }.fb_dialog.fb_dialog_mobile.loading.centered { background: none; height: auto; min-height: initial; min-width: initial; width: auto; }.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner { width: 100%; }.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content { background: none; }.loading.centered #fb_dialog_loader_close { clear: both; color: rgb(255, 255, 255); display: block; font-size: 18px; padding-top: 20px; }#fb-root #fb_dialog_ipad_overlay { background: rgba(0, 0, 0, 0.4); inset: 0px; min-height: 100%; position: absolute; width: 100%; z-index: 10000; }#fb-root #fb_dialog_ipad_overlay.hidden { display: none; }.fb_dialog.fb_dialog_mobile.loading iframe { visibility: hidden; }.fb_dialog_mobile .fb_dialog_iframe { position: sticky; top: 0px; }.fb_dialog_content .dialog_header { border-bottom: 1px solid rgb(4, 59, 135); border-color: rgb(4, 59, 135); box-shadow: white 0px 1px 1px -1px inset; color: rgb(255, 255, 255); font: bold 14px Helvetica, sans-serif; text-overflow: ellipsis; text-shadow: rgba(0, 30, 84, 0.297) 0px -1px 0px; vertical-align: middle; white-space: nowrap; }.fb_dialog_content .dialog_header table { height: 43px; width: 100%; }.fb_dialog_content .dialog_header td.header_left { font-size: 12px; padding-left: 5px; vertical-align: middle; width: 60px; }.fb_dialog_content .dialog_header td.header_right { font-size: 12px; padding-right: 5px; vertical-align: middle; width: 60px; }.fb_dialog_content .touchable_button { background-clip: padding-box; border: 1px solid rgb(41, 72, 125); border-radius: 3px; display: inline-block; line-height: 18px; margin-top: 3px; max-width: 85px; padding: 4px 12px; position: relative; }.fb_dialog_content .dialog_header .touchable_button input { background: none; border: medium; color: rgb(255, 255, 255); font: bold 12px Helvetica, sans-serif; margin: 2px -12px; padding: 2px 6px 3px; text-shadow: rgba(0, 30, 84, 0.297) 0px -1px 0px; }.fb_dialog_content .dialog_header .header_center { color: rgb(255, 255, 255); font-size: 16px; font-weight: bold; line-height: 18px; text-align: center; vertical-align: middle; }.fb_dialog_content .dialog_content { background: url(\&quot;${scheme}://connect.facebook.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif\&quot;) 50% 50% no-repeat; border-width: 0px 1px; border-style: none solid; border-color: currentcolor rgb(74, 74, 74); border-image: none; height: 150px; }.fb_dialog_content .dialog_footer { background: rgb(245, 246, 247); border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(74, 74, 74) rgb(74, 74, 74); border-image: none; height: 40px; }#fb_dialog_loader_close { float: left; }.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon { visibility: hidden; }#fb_dialog_loader_spinner { animation: 1.2s linear infinite rotateSpinner; background-color: transparent; background-image: url(\&quot;${scheme}://connect.facebook.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png\&quot;); background-position: 50% 50%; background-repeat: no-repeat; height: 24px; width: 24px; }@keyframes rotateSpinner {\n0% { transform: rotate(0deg); }\n100% { transform: rotate(360deg); }\n}.fb_iframe_widget { display: inline-block; position: relative; }.fb_iframe_widget span { display: inline-block; position: relative; text-align: justify; }.fb_iframe_widget iframe { position: absolute; }.fb_iframe_widget_fluid_desktop, .fb_iframe_widget_fluid_desktop span, .fb_iframe_widget_fluid_desktop iframe { max-width: 100%; }.fb_iframe_widget_fluid_desktop iframe { min-width: 220px; position: relative; }.fb_iframe_widget_lift { z-index: 1; }.fb_iframe_widget_fluid { display: inline; }.fb_iframe_widget_fluid span { width: 100%; }.fb_mpn_mobile_landing_page_slide_out { animation-duration: 200ms; animation-name: fb_mpn_landing_page_slide_out; transition-timing-function: ease-in; }.fb_mpn_mobile_landing_page_slide_out_from_left { animation-duration: 200ms; animation-name: fb_mpn_landing_page_slide_out_from_left; transition-timing-function: ease-in; }.fb_mpn_mobile_landing_page_slide_up { animation-duration: 500ms; animation-name: fb_mpn_landing_page_slide_up; transition-timing-function: ease-in; }.fb_mpn_mobile_bounce_in { animation-duration: 300ms; animation-name: fb_mpn_bounce_in; transition-timing-function: ease-in; }.fb_mpn_mobile_bounce_out { animation-duration: 300ms; animation-name: fb_mpn_bounce_out; transition-timing-function: ease-in; }.fb_mpn_mobile_bounce_out_v2 { animation-duration: 300ms; animation-name: fb_mpn_fade_out; transition-timing-function: ease-in; }.fb_customer_chat_bounce_in_v2 { animation-duration: 300ms; animation-name: fb_bounce_in_v2; transition-timing-function: ease-in; }.fb_customer_chat_bounce_in_from_left { animation-duration: 300ms; animation-name: fb_bounce_in_from_left; transition-timing-function: ease-in; }.fb_customer_chat_bounce_out_v2 { animation-duration: 300ms; animation-name: fb_bounce_out_v2; transition-timing-function: ease-in; }.fb_customer_chat_bounce_out_from_left { animation-duration: 300ms; animation-name: fb_bounce_out_from_left; transition-timing-function: ease-in; }.fb_invisible_flow { display: inherit; height: 0px; overflow-x: hidden; width: 0px; }@keyframes fb_mpn_landing_page_slide_out {\n0% { margin: 0px 12px; }\n60% { border-radius: 18px; }\n100% { border-radius: 50%; margin: 0px 24px; width: 60px; }\n}@keyframes fb_mpn_landing_page_slide_out_from_left {\n0% { left: 12px; }\n60% { border-radius: 18px; }\n100% { border-radius: 50%; left: 12px; width: 60px; }\n}@keyframes fb_mpn_landing_page_slide_up {\n0% { bottom: 0px; opacity: 0; }\n100% { bottom: 24px; opacity: 1; }\n}@keyframes fb_mpn_bounce_in {\n0% { opacity: 0.5; top: 100%; }\n100% { opacity: 1; top: 0px; }\n}@keyframes fb_mpn_fade_out {\n0% { bottom: 30px; opacity: 1; }\n100% { bottom: 0px; opacity: 0; }\n}@keyframes fb_mpn_bounce_out {\n0% { opacity: 1; top: 0px; }\n100% { opacity: 0.5; top: 100%; }\n}@keyframes fb_bounce_in_v2 {\n0% { opacity: 0; transform: scale(0); transform-origin: right bottom 0px; }\n50% { transform: scale(1.03); transform-origin: right bottom 0px; }\n100% { opacity: 1; transform: scale(1); transform-origin: right bottom 0px; }\n}@keyframes fb_bounce_in_from_left {\n0% { opacity: 0; transform: scale(0); transform-origin: left bottom 0px; }\n50% { transform: scale(1.03); transform-origin: left bottom 0px; }\n100% { opacity: 1; transform: scale(1); transform-origin: left bottom 0px; }\n}@keyframes fb_bounce_out_v2 {\n0% { opacity: 1; transform: scale(1); transform-origin: right bottom 0px; }\n100% { opacity: 0; transform: scale(0); transform-origin: right bottom 0px; }\n}@keyframes fb_bounce_out_from_left {\n0% { opacity: 1; transform: scale(1); transform-origin: left bottom 0px; }\n100% { opacity: 0; transform: scale(0); transform-origin: left bottom 0px; }\n}@keyframes slideInFromBottom {\n0% { opacity: 0.1; transform: translateY(100%); }\n100% { opacity: 1; transform: translateY(0px); }\n}@keyframes slideInFromBottomDelay {\n0% { opacity: 0; transform: translateY(100%); }\n97% { opacity: 0; transform: translateY(100%); }\n100% { opacity: 1; transform: translateY(0px); }\n}&quot;],[131,6,142,140,489,&quot;DIV&quot;,&quot;id=fb-customer-chat&quot;,&quot;class=fb-customerchat&quot;,&quot;page_id=104043352535894&quot;,&quot;attribution=biz_inbox&quot;,&quot;fb-xfbml-state=rendered&quot;,&quot;fb-iframe-plugin-query=app_id=&amp;attribution=biz_inbox&amp;current_url=${scheme}%3A%2F%2Fkeeron.selisestage.com%2Ftest-packages%2Fmath-test-english&amp;is_loaded_by_facade=true&amp;locale=en_US&amp;log_id=c35e85a0-c625-48b1-9503-e1909c3f320b&amp;page_id=104043352535894&amp;request_time=1723026028429&amp;sdk=joey&amp;should_use_new_domain=false&quot;,492,142,[5],&quot;id=f72fd848028946b5f&quot;,157,&quot;*T&quot;],[174,6,493,492,&quot;*S&quot;,&quot;style=&quot;,494,493,&quot;STYLE&quot;,&quot;type=text/css&quot;,&quot;data-fbcssmodules=css:fb.shadow.css.chatdom&quot;,&quot;.container { box-shadow: rgba(0, 0, 0, 0.15) 0px 4px 12px 0px; cursor: pointer; }.label-container { align-items: center; display: flex; }.label-container-icon { margin-left: -2px; }.centered-container { align-items: center; display: flex; height: 100%; justify-content: center; width: 100%; }.label-container-label { color: rgb(255, 255, 255); display: flex; font-family: -apple-system, BlinkMacSystemFont, \&quot;Segoe UI\&quot;, Roboto, Oxygen, Ubuntu, Cantarell, \&quot;Open Sans\&quot;, \&quot;Helvetica Neue\&quot;, sans-serif; font-style: normal; font-weight: 600; user-select: none; white-space: nowrap; }@keyframes spin {\n0% { transform: rotate(0deg); }\n100% { transform: rotate(360deg); }\n}.spinning { animation: 2s linear infinite spin; }.spinning .path { animation: 1.5s ease-in-out infinite dash; stroke: white; stroke-linecap: round; }@keyframes dash {\n0% { stroke-dasharray: 1px, 150px; stroke-dashoffset: 0px; }\n50% { stroke-dasharray: 90px, 150px; stroke-dashoffset: -56px; }\n100% { stroke-dasharray: 90px, 150px; stroke-dashoffset: -149px; }\n}@keyframes slideInFromBottomDelay {\n0% { opacity: 0; transform: translateY(100%); }\n90% { opacity: 0; transform: translateY(100%); }\n100% { opacity: 1; transform: translateY(0px); }\n}&quot;,495,493,494,&quot;DIV&quot;,&quot;class=container&quot;]]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-41" enabled="true">
              <stringProp name="HTTPSampler.domain">r.clarity.ms</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/collect</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.43&quot;,1,0,111,&quot;ks96b3hjrc&quot;,&quot;1hko1e2&quot;,&quot;11dlr0f&quot;,1,0,0],&quot;a&quot;:[[2,8,1903,1203],[14,11,1903,955],[14,28,&quot;visible&quot;],[18,29,223424,223428,223428,223428,223436,223436,27,226018,226018,226018,0,93847,&quot;reload&quot;,&quot;http/1.1&quot;,93643,93643],[26,24,&quot;clarity&quot;,&quot;dup.ks96b3hjrc&quot;],[111,34,&quot;C_IS&quot;,[&quot;0&quot;]],[111,1,0,[&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0&quot;],1,[&quot;${scheme}://${host}&quot;],3,[&quot;english-math-test&quot;],4,[&quot;www.googletagmanager.com&quot;,&quot;keeron.selisestage.com&quot;,&quot;www.clarity.ms&quot;,&quot;www.google.com.bd&quot;,&quot;analytics.google.com&quot;,&quot;selisefalcon.blob.core.windows.net&quot;,&quot;connect.facebook.net&quot;],9,[&quot;en-US&quot;],15,[&quot;g0xptz&quot;],16,[&quot;en&quot;],19,[&quot;website&quot;],20,[&quot;english-math-test&quot;],22,[&quot;Win32&quot;],26,[&quot;1&quot;],28,[&quot;1658&quot;],29,[&quot;2&quot;],31,[&quot;149gwrhn8.1u3m304bp&quot;],32,[&quot;8e1vwoz1i.3qwtjryjr&quot;],34,[&quot;Asia/Dhaka&quot;],35,[&quot;-360&quot;]],[111,0,0,1723026028301,1,1,3,15,4,15,5,2,8,225184,14,1920,15,1080,16,24,25,8,26,0,31,1,32,0,33,6,35,0]],&quot;p&quot;:[[2,5,1,&quot;*D&quot;,&quot;name=html&quot;,&quot;publicId=&quot;,&quot;systemId=&quot;,2,&quot;HTML&quot;,&quot;lang=en&quot;,&quot;data-theme=light&quot;,&quot;style=color-scheme: light;&quot;,3,2,&quot;HEAD&quot;,&quot;*B=${scheme}://${host}&quot;,4,2,3,&quot;BODY&quot;,&quot;class=chakra-ui-light&quot;,5,3,&quot;TITLE&quot;,6,3,5,&quot;LINK&quot;,&quot;rel=preconnect&quot;,&quot;href=/&quot;,&quot;crossorigin=anonymous&quot;,7,3,6,[27],&quot;rel=preload&quot;,&quot;href=/_next/static/css/8faf254347804ded.css&quot;,&quot;as=style&quot;,8,3,7,[27],&quot;rel=stylesheet&quot;,[36],&quot;data-n-g=&quot;,9,3,8,&quot;NOSCRIPT&quot;,10,3,9,&quot;STYLE&quot;,&quot;data-emotion=css-global&quot;,&quot;data-s=&quot;,&quot;:host, :root, [data-theme] { --chakra-ring-inset: var(--chakra-empty,/*!*/ /*!*/); --chakra-ring-offset-width: 0px; --chakra-ring-offset-color: #fff; --chakra-ring-color: rgba(66, 153, 225, 0.6); --chakra-ring-offset-shadow: 0 0 #0000; --chakra-ring-shadow: 0 0 #0000; --chakra-space-x-reverse: 0; --chakra-space-y-reverse: 0; --chakra-colors-transparent: transparent; --chakra-colors-current: currentColor; --chakra-colors-black: #000000; --chakra-colors-white: #FFFFFF; --chakra-colors-whiteAlpha-50: rgba(255, 255, 255, 0.04); --chakra-colors-whiteAlpha-100: rgba(255, 255, 255, 0.06); --chakra-colors-whiteAlpha-200: rgba(255, 255, 255, 0.08); --chakra-colors-whiteAlpha-300: rgba(255, 255, 255, 0.16); --chakra-colors-whiteAlpha-400: rgba(255, 255, 255, 0.24); --chakra-colors-whiteAlpha-500: rgba(255, 255, 255, 0.36); --chakra-colors-whiteAlpha-600: rgba(255, 255, 255, 0.48); --chakra-colors-whiteAlpha-700: rgba(255, 255, 255, 0.64); --chakra-colors-whiteAlpha-800: rgba(255, 255, 255, 0.80); --chakra-colors-whiteAlpha-900: rgba(255, 255, 255, 0.92); --chakra-colors-blackAlpha-50: rgba(0, 0, 0, 0.04); --chakra-colors-blackAlpha-100: rgba(0, 0, 0, 0.06); --chakra-colors-blackAlpha-200: rgba(0, 0, 0, 0.08); --chakra-colors-blackAlpha-300: rgba(0, 0, 0, 0.16); --chakra-colors-blackAlpha-400: rgba(0, 0, 0, 0.24); --chakra-colors-blackAlpha-500: rgba(0, 0, 0, 0.36); --chakra-colors-blackAlpha-600: rgba(0, 0, 0, 0.48); --chakra-colors-blackAlpha-700: rgba(0, 0, 0, 0.64); --chakra-colors-blackAlpha-800: rgba(0, 0, 0, 0.80); --chakra-colors-blackAlpha-900: rgba(0, 0, 0, 0.92); --chakra-colors-gray-50: #F7FAFC; --chakra-colors-gray-100: #EDF2F7; --chakra-colors-gray-200: #E2E8F0; --chakra-colors-gray-300: #CBD5E0; --chakra-colors-gray-400: #A0AEC0; --chakra-colors-gray-500: #718096; --chakra-colors-gray-600: #4A5568; --chakra-colors-gray-700: #2D3748; --chakra-colors-gray-800: #1A202C; --chakra-colors-gray-900: #171923; --chakra-colors-red-50: #FFF5F5; --chakra-colors-red-100: #FED7D7; --chakra-colors-red-200: #FEB2B2; --chakra-colors-red-300: #FC8181; --chakra-colors-red-400: #F56565; --chakra-colors-red-500: #E53E3E; --chakra-colors-red-600: #C53030; --chakra-colors-red-700: #9B2C2C; --chakra-colors-red-800: #822727; --chakra-colors-red-900: #63171B; --chakra-colors-orange-50: #FFFAF0; --chakra-colors-orange-100: #FEEBC8; --chakra-colors-orange-200: #FBD38D; --chakra-colors-orange-300: #F6AD55; --chakra-colors-orange-400: #ED8936; --chakra-colors-orange-500: #DD6B20; --chakra-colors-orange-600: #C05621; --chakra-colors-orange-700: #9C4221; --chakra-colors-orange-800: #7B341E; --chakra-colors-orange-900: #652B19; --chakra-colors-yellow-50: #FFFFF0; --chakra-colors-yellow-100: #FEFCBF; --chakra-colors-yellow-200: #FAF089; --chakra-colors-yellow-300: #F6E05E; --chakra-colors-yellow-400: #ECC94B; --chakra-colors-yellow-500: #D69E2E; --chakra-colors-yellow-600: #B7791F; --chakra-colors-yellow-700: #975A16; --chakra-colors-yellow-800: #744210; --chakra-colors-yellow-900: #5F370E; --chakra-colors-green-50: #F0FFF4; --chakra-colors-green-100: #C6F6D5; --chakra-colors-green-200: #9AE6B4; --chakra-colors-green-300: #68D391; --chakra-colors-green-400: #48BB78; --chakra-colors-green-500: #38A169; --chakra-colors-green-600: #2F855A; --chakra-colors-green-700: #276749; --chakra-colors-green-800: #22543D; --chakra-colors-green-900: #1C4532; --chakra-colors-teal-50: #E6FFFA; --chakra-colors-teal-100: #B2F5EA; --chakra-colors-teal-200: #81E6D9; --chakra-colors-teal-300: #4FD1C5; --chakra-colors-teal-400: #38B2AC; --chakra-colors-teal-500: #319795; --chakra-colors-teal-600: #2C7A7B; --chakra-colors-teal-700: #285E61; --chakra-colors-teal-800: #234E52; --chakra-colors-teal-900: #1D4044; --chakra-colors-blue-50: #ebf8ff; --chakra-colors-blue-100: #bee3f8; --chakra-colors-blue-200: #90cdf4; --chakra-colors-blue-300: #63b3ed; --chakra-colors-blue-400: #4299e1; --chakra-colors-blue-500: #3182ce; --chakra-colors-blue-600: #2b6cb0; --chakra-colors-blue-700: #2c5282; --chakra-colors-blue-800: #2a4365; --chakra-colors-blue-900: #1A365D; --chakra-colors-cyan-50: #EDFDFD; --chakra-colors-cyan-100: #C4F1F9; --chakra-colors-cyan-200: #9DECF9; --chakra-colors-cyan-300: #76E4F7; --chakra-colors-cyan-400: #0BC5EA; --chakra-colors-cyan-500: #00B5D8; --chakra-colors-cyan-600: #00A3C4; --chakra-colors-cyan-700: #0987A0; --chakra-colors-cyan-800: #086F83; --chakra-colors-cyan-900: #065666; --chakra-colors-purple-50: #FAF5FF; --chakra-colors-purple-100: #E9D8FD; --chakra-colors-purple-200: #D6BCFA; --chakra-colors-purple-300: #B794F4; --chakra-colors-purple-400: #9F7AEA; --chakra-colors-purple-500: #805AD5; --chakra-colors-purple-600: #6B46C1; --chakra-colors-purple-700: #553C9A; --chakra-colors-purple-800: #44337A; --chakra-colors-purple-900: #322659; --chakra-colors-pink-50: #FFF5F7; --chakra-colors-pink-100: #FED7E2; --chakra-colors-pink-200: #FBB6CE; --chakra-colors-pink-300: #F687B3; --chakra-colors-pink-400: #ED64A6; --chakra-colors-pink-500: #D53F8C; --chakra-colors-pink-600: #B83280; --chakra-colors-pink-700: #97266D; --chakra-colors-pink-800: #702459; --chakra-colors-pink-900: #521B41; --chakra-colors-linkedin-50: #E8F4F9; --chakra-colors-linkedin-100: #CFEDFB; --chakra-colors-linkedin-200: #9BDAF3; --chakra-colors-linkedin-300: #68C7EC; --chakra-colors-linkedin-400: #34B3E4; --chakra-colors-linkedin-500: #00A0DC; --chakra-colors-linkedin-600: #008CC9; --chakra-colors-linkedin-700: #0077B5; --chakra-colors-linkedin-800: #005E93; --chakra-colors-linkedin-900: #004471; --chakra-colors-facebook-50: #E8F4F9; --chakra-colors-facebook-100: #D9DEE9; --chakra-colors-facebook-200: #B7C2DA; --chakra-colors-facebook-300: #6482C0; --chakra-colors-facebook-400: #4267B2; --chakra-colors-facebook-500: #385898; --chakra-colors-facebook-600: #314E89; --chakra-colors-facebook-700: #29487D; --chakra-colors-facebook-800: #223B67; --chakra-colors-facebook-900: #1E355B; --chakra-colors-messenger-50: #D0E6FF; --chakra-colors-messenger-100: #B9DAFF; --chakra-colors-messenger-200: #A2CDFF; --chakra-colors-messenger-300: #7AB8FF; --chakra-colors-messenger-400: #2E90FF; --chakra-colors-messenger-500: #0078FF; --chakra-colors-messenger-600: #0063D1; --chakra-colors-messenger-700: #0052AC; --chakra-colors-messenger-800: #003C7E; --chakra-colors-messenger-900: #002C5C; --chakra-colors-whatsapp-50: #dffeec; --chakra-colors-whatsapp-100: #b9f5d0; --chakra-colors-whatsapp-200: #90edb3; --chakra-colors-whatsapp-300: #65e495; --chakra-colors-whatsapp-400: #3cdd78; --chakra-colors-whatsapp-500: #22c35e; --chakra-colors-whatsapp-600: #179848; --chakra-colors-whatsapp-700: #0c6c33; --chakra-colors-whatsapp-800: #01421c; --chakra-colors-whatsapp-900: #001803; --chakra-colors-twitter-50: #E5F4FD; --chakra-colors-twitter-100: #C8E9FB; --chakra-colors-twitter-200: #A8DCFA; --chakra-colors-twitter-300: #83CDF7; --chakra-colors-twitter-400: #57BBF5; --chakra-colors-twitter-500: #1DA1F2; --chakra-colors-twitter-600: #1A94DA; --chakra-colors-twitter-700: #1681BF; --chakra-colors-twitter-800: #136B9E; --chakra-colors-twitter-900: #0D4D71; --chakra-colors-telegram-50: #E3F2F9; --chakra-colors-telegram-100: #C5E4F3; --chakra-colors-telegram-200: #A2D4EC; --chakra-colors-telegram-300: #7AC1E4; --chakra-colors-telegram-400: #47A9DA; --chakra-colors-telegram-500: #0088CC; --chakra-colors-telegram-600: #007AB8; --chakra-colors-telegram-700: #006BA1; --chakra-colors-telegram-800: #005885; --chakra-colors-telegram-900: #003F5E; --chakra-colors-brand-50: #F0FDF4; --chakra-colors-brand-100: #DBFDE7; --chakra-colors-brand-200: #B9F9CF; --chakra-colors-brand-300: #82F3AB; --chakra-colors-brand-400: #45E37F; --chakra-colors-brand-500: #1ED561; --chakra-colors-brand-600: #11A849; --chakra-colors-brand-700: #11843C; --chakra-colors-brand-800: #136833; --chakra-colors-brand-900: #12552D; --chakra-colors-buttonBrand-50: #F0FDF4; --chakra-colors-buttonBrand-100: #DBFDE7; --chakra-colors-buttonBrand-200: #B9F9CF; --chakra-colors-buttonBrand-300: #82F3AB; --chakra-colors-buttonBrand-400: #45E37F; --chakra-colors-buttonBrand-500: #11A849; --chakra-colors-buttonBrand-600: #11A849; --chakra-colors-buttonBrand-700: #11843C; --chakra-colors-buttonBrand-800: #136833; --chakra-colors-buttonBrand-900: #12552D; --chakra-colors-secondary-50: #E9FAFF; --chakra-colors-secondary-100: #D7F6FF; --chakra-colors-secondary-200: #B6EDFF; --chakra-colors-secondary-300: #8BDEFF; --chakra-colors-secondary-400: #5DC2FF; --chakra-colors-secondary-500: #38A3FF; --chakra-colors-secondary-600: #167EFF; --chakra-colors-secondary-700: #0C72F6; --chakra-colors-secondary-800: #0D60C6; --chakra-colors-secondary-900: #0A2849; --chakra-colors-accent-50: #FFFFE7; --chakra-colors-accent-100: #FFFFC1; --chakra-colors-accent-200: #FFFB86; --chakra-colors-accent-300: #FFF141; --chakra-colors-accent-400: #FFE20D; --chakra-colors-accent-500: #F8CD00; --chakra-colors-accent-600: #D19B00; --chakra-colors-accent-700: #A66E02; --chakra-colors-accent-800: #89560A; --chakra-colors-accent-900: #74460F; --chakra-colors-divider: #1E3E61; --chakra-colors-textGradient: linear-gradient(90deg, #42FF87 0%, #FFD300 100%); --chakra-borders-none: 0; --chakra-borders-1px: 1px solid; --chakra-borders-2px: 2px solid; --chakra-borders-4px: 4px solid; --chakra-borders-8px: 8px solid; --chakra-fonts-heading: Open Sans,-apple-system,BlinkMacSystemFont,\&quot;Segoe UI\&quot;,Helvetica,Arial,sans-serif,\&quot;Apple Color Emoji\&quot;,\&quot;Segoe UI Emoji\&quot;,\&quot;Segoe UI Symbol\&quot;; --chakra-fonts-body: Open Sans,-apple-system,BlinkMacSystemFont,\&quot;Segoe UI\&quot;,Helvetica,Arial,sans-serif,\&quot;Apple Color Emoji\&quot;,\&quot;Segoe UI Emoji\&quot;,\&quot;Segoe UI Symbol\&quot;; --chakra-fonts-mono: SFMono-Regular,Menlo,Monaco,Consolas,\&quot;Liberation Mono\&quot;,\&quot;Courier New\&quot;,monospace; --chakra-fontSizes-3xs: 0.45rem; --chakra-fontSizes-2xs: 0.625rem; --chakra-fontSizes-xs: 0.75rem; --chakra-fontSizes-sm: 0.875rem; --chakra-fontSizes-md: 1rem; --chakra-fontSizes-lg: 1.125rem; --chakra-fontSizes-xl: 1.25rem; --chakra-fontSizes-2xl: 1.5rem; --chakra-fontSizes-3xl: 1.875rem; --chakra-fontSizes-4xl: 2.25rem; --chakra-fontSizes-5xl: 3rem; --chakra-fontSizes-6xl: 3.75rem; --chakra-fontSizes-7xl: 4.5rem; --chakra-fontSizes-8xl: 6rem; --chakra-fontSizes-9xl: 8rem; --chakra-fontWeights-hairline: 100; --chakra-fontWeights-thin: 200; --chakra-fontWeights-light: 300; --chakra-fontWeights-normal: 400; --chakra-fontWeights-medium: 500; --chakra-fontWeights-semibold: 600; --chakra-fontWeights-bold: 700; --chakra-fontWeights-extrabold: 800; --chakra-fontWeights-black: 900; --chakra-letterSpacings-tighter: -0.05em; --chakra-letterSpacings-tight: -0.025em; --chakra-letterSpacings-normal: 0; --chakra-letterSpacings-wide: 0.025em; --chakra-letterSpacings-wider: 0.05em; --chakra-letterSpacings-widest: 0.1em; --chakra-lineHeights-3: .75rem; --chakra-lineHeights-4: 1rem; --chakra-lineHeights-5: 1.25rem; --chakra-lineHeights-6: 1.5rem; --chakra-lineHeights-7: 1.75rem; --chakra-lineHeights-8: 2rem; --chakra-lineHeights-9: 2.25rem; --chakra-lineHeights-10: 2.5rem; --chakra-lineHeights-normal: normal; --chakra-lineHeights-none: 1; --chakra-lineHeights-shorter: 1.25; --chakra-lineHeights-short: 1.375; --chakra-lineHeights-base: 1.5; --chakra-lineHeights-tall: 1.625; --chakra-lineHeights-taller: 2; --chakra-radii-none: 0; --chakra-radii-sm: 0.125rem; --chakra-radii-base: 0.25rem; --chakra-radii-md: 0.375rem; --chakra-radii-lg: 0.5rem; --chakra-radii-xl: 0.75rem; --chakra-radii-2xl: 1rem; --chakra-radii-3xl: 1.5rem; --chakra-radii-full: 9999px; --chakra-space-1: 0.25rem; --chakra-space-2: 0.5rem; --chakra-space-3: 0.75rem; --chakra-space-4: 1rem; --chakra-space-5: 1.25rem; --chakra-space-6: 1.5rem; --chakra-space-7: 1.75rem; --chakra-space-8: 2rem; --chakra-space-9: 2.25rem; --chakra-space-10: 2.5rem; --chakra-space-12: 3rem; --chakra-space-14: 3.5rem; --chakra-space-16: 4rem; --chakra-space-20: 5rem; --chakra-space-24: 6rem; --chakra-space-28: 7rem; --chakra-space-32: 8rem; --chakra-space-36: 9rem; --chakra-space-40: 10rem; --chakra-space-44: 11rem; --chakra-space-48: 12rem; --chakra-space-52: 13rem; --chakra-space-56: 14rem; --chakra-space-60: 15rem; --chakra-space-64: 16rem; --chakra-space-72: 18rem; --chakra-space-80: 20rem; --chakra-space-96: 24rem; --chakra-space-px: 1px; --chakra-space-0-5: 0.125rem; --chakra-space-1-5: 0.375rem; --chakra-space-2-5: 0.625rem; --chakra-space-3-5: 0.875rem; --chakra-shadows-xs: 0 0 0 1px rgba(0, 0, 0, 0.05); --chakra-shadows-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05); --chakra-shadows-base: 0 1px 3px 0 rgba(0, 0, 0, 0.1),0 1px 2px 0 rgba(0, 0, 0, 0.06); --chakra-shadows-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1),0 2px 4px -1px rgba(0, 0, 0, 0.06); --chakra-shadows-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1),0 4px 6px -2px rgba(0, 0, 0, 0.05); --chakra-shadows-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1),0 10px 10px -5px rgba(0, 0, 0, 0.04); --chakra-shadows-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25); --chakra-shadows-outline: 0 0 0 3px rgba(66, 153, 225, 0.6); --chakra-shadows-inner: inset 0 2px 4px 0 rgba(0,0,0,0.06); --chakra-shadows-none: none; --chakra-shadows-dark-lg: rgba(0, 0, 0, 0.1) 0px 0px 0px 1px,rgba(0, 0, 0, 0.2) 0px 5px 10px,rgba(0, 0, 0, 0.4) 0px 15px 40px; --chakra-sizes-1: 0.25rem; --chakra-sizes-2: 0.5rem; --chakra-sizes-3: 0.75rem; --chakra-sizes-4: 1rem; --chakra-sizes-5: 1.25rem; --chakra-sizes-6: 1.5rem; --chakra-sizes-7: 1.75rem; --chakra-sizes-8: 2rem; --chakra-sizes-9: 2.25rem; --chakra-sizes-10: 2.5rem; --chakra-sizes-12: 3rem; --chakra-sizes-14: 3.5rem; --chakra-sizes-16: 4rem; --chakra-sizes-20: 5rem; --chakra-sizes-24: 6rem; --chakra-sizes-28: 7rem; --chakra-sizes-32: 8rem; --chakra-sizes-36: 9rem; --chakra-sizes-40: 10rem; --chakra-sizes-44: 11rem; --chakra-sizes-48: 12rem; --chakra-sizes-52: 13rem; --chakra-sizes-56: 14rem; --chakra-sizes-60: 15rem; --chakra-sizes-64: 16rem; --chakra-sizes-72: 18rem; --chakra-sizes-80: 20rem; --chakra-sizes-96: 24rem; --chakra-sizes-px: 1px; --chakra-sizes-0-5: 0.125rem; --chakra-sizes-1-5: 0.375rem; --chakra-sizes-2-5: 0.625rem; --chakra-sizes-3-5: 0.875rem; --chakra-sizes-max: max-content; --chakra-sizes-min: min-content; --chakra-sizes-full: 100%; --chakra-sizes-3xs: 14rem; --chakra-sizes-2xs: 16rem; --chakra-sizes-xs: 20rem; --chakra-sizes-sm: 24rem; --chakra-sizes-md: 28rem; --chakra-sizes-lg: 32rem; --chakra-sizes-xl: 36rem; --chakra-sizes-2xl: 42rem; --chakra-sizes-3xl: 48rem; --chakra-sizes-4xl: 56rem; --chakra-sizes-5xl: 64rem; --chakra-sizes-6xl: 72rem; --chakra-sizes-7xl: 80rem; --chakra-sizes-8xl: 90rem; --chakra-sizes-prose: 60ch; --chakra-sizes-container-sm: 640px; --chakra-sizes-container-md: 768px; --chakra-sizes-container-lg: 1024px; --chakra-sizes-container-xl: 1280px; --chakra-zIndices-hide: -1; --chakra-zIndices-auto: auto; --chakra-zIndices-base: 0; --chakra-zIndices-docked: 10; --chakra-zIndices-dropdown: 1000; --chakra-zIndices-sticky: 1100; --chakra-zIndices-banner: 1200; --chakra-zIndices-overlay: 1300; --chakra-zIndices-modal: 1400; --chakra-zIndices-popover: 1500; --chakra-zIndices-skipLink: 1600; --chakra-zIndices-toast: 1700; --chakra-zIndices-tooltip: 1800; --chakra-transition-property-common: background-color,border-color,color,fill,stroke,opacity,box-shadow,transform; --chakra-transition-property-colors: background-color,border-color,color,fill,stroke; --chakra-transition-property-dimensions: width,height; --chakra-transition-property-position: left,right,top,bottom; --chakra-transition-property-background: background-color,background-image,background-position; --chakra-transition-easing-ease-in: cubic-bezier(0.4, 0, 1, 1); --chakra-transition-easing-ease-out: cubic-bezier(0, 0, 0.2, 1); --chakra-transition-easing-ease-in-out: cubic-bezier(0.4, 0, 0.2, 1); --chakra-transition-duration-ultra-fast: 50ms; --chakra-transition-duration-faster: 100ms; --chakra-transition-duration-fast: 150ms; --chakra-transition-duration-normal: 200ms; --chakra-transition-duration-slow: 300ms; --chakra-transition-duration-slower: 400ms; --chakra-transition-duration-ultra-slow: 500ms; --chakra-blur-none: 0; --chakra-blur-sm: 4px; --chakra-blur-base: 8px; --chakra-blur-md: 12px; --chakra-blur-lg: 16px; --chakra-blur-xl: 24px; --chakra-blur-2xl: 40px; --chakra-blur-3xl: 64px; --chakra-breakpoints-base: 0em; --chakra-breakpoints-sm: 30em; --chakra-breakpoints-md: 48em; --chakra-breakpoints-lg: 62em; --chakra-breakpoints-xl: 80em; --chakra-breakpoints-2xl: 96em; }.chakra-ui-light :host:not([data-theme]), .chakra-ui-light :root:not([data-theme]), .chakra-ui-light [data-theme]:not([data-theme]), [data-theme=\&quot;light\&quot;] :host:not([data-theme]), [data-theme=\&quot;light\&quot;] :root:not([data-theme]), [data-theme=\&quot;light\&quot;] [data-theme]:not([data-theme]), :host[data-theme=\&quot;light\&quot;], :root[data-theme=\&quot;light\&quot;], [data-theme][data-theme=\&quot;light\&quot;] { --chakra-colors-chakra-body-text: var(--chakra-colors-gray-800); --chakra-colors-chakra-body-bg: var(--chakra-colors-white); --chakra-colors-chakra-border-color: var(--chakra-colors-gray-200); --chakra-colors-chakra-inverse-text: var(--chakra-colors-white); --chakra-colors-chakra-subtle-bg: var(--chakra-colors-gray-100); --chakra-colors-chakra-subtle-text: var(--chakra-colors-gray-600); --chakra-colors-chakra-placeholder-color: var(--chakra-colors-gray-500); }.chakra-ui-dark :host:not([data-theme]), .chakra-ui-dark :root:not([data-theme]), .chakra-ui-dark [data-theme]:not([data-theme]), [data-theme=\&quot;dark\&quot;] :host:not([data-theme]), [data-theme=\&quot;dark\&quot;] :root:not([data-theme]), [data-theme=\&quot;dark\&quot;] [data-theme]:not([data-theme]), :host[data-theme=\&quot;dark\&quot;], :root[data-theme=\&quot;dark\&quot;], [data-theme][data-theme=\&quot;dark\&quot;] { --chakra-colors-chakra-body-text: var(--chakra-colors-whiteAlpha-900); --chakra-colors-chakra-body-bg: var(--chakra-colors-gray-800); --chakra-colors-chakra-border-color: var(--chakra-colors-whiteAlpha-300); --chakra-colors-chakra-inverse-text: var(--chakra-colors-gray-800); --chakra-colors-chakra-subtle-bg: var(--chakra-colors-gray-700); --chakra-colors-chakra-subtle-text: var(--chakra-colors-gray-400); --chakra-colors-chakra-placeholder-color: var(--chakra-colors-whiteAlpha-400); }&quot;,11,3,10,[52,53,54],&quot;html { line-height: 1.5; font-family: system-ui, sans-serif; text-rendering: optimizelegibility; touch-action: manipulation; }body { position: relative; min-height: 100%; margin: 0px; font-feature-settings: \&quot;kern\&quot;; }:where(*, *::before, *::after) { border-width: 0px; border-style: solid; box-sizing: border-box; overflow-wrap: break-word; }main { display: block; }hr { border-top-width: 1px; box-sizing: content-box; height: 0px; overflow: visible; }:where(pre, code, kbd, samp) { font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace; font-size: 1em; }a { background-color: transparent; color: inherit; text-decoration: inherit; }abbr[title] { border-bottom: medium; text-decoration: underline dotted; }:where(b, strong) { font-weight: bold; }small { font-size: 80%; }:where(sub, sup) { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }sub { bottom: -0.25em; }sup { top: -0.5em; }img { border-style: none; }:where(button, input, optgroup, select, textarea) { font-family: inherit; font-size: 100%; line-height: 1.15; margin: 0px; }:where(button, input) { overflow: visible; }:where(button, select) { text-transform: none; }:where(button::-moz-focus-inner, [type=\&quot;button\&quot;]::-moz-focus-inner, [type=\&quot;reset\&quot;]::-moz-focus-inner, [type=\&quot;submit\&quot;]::-moz-focus-inner) { border-style: none; padding: 0px; }fieldset { padding: 0.35em 0.75em 0.625em; }legend { box-sizing: border-box; color: inherit; display: table; max-width: 100%; padding: 0px; white-space: normal; }progress { vertical-align: baseline; }textarea { overflow: auto; }:where([type=\&quot;checkbox\&quot;], [type=\&quot;radio\&quot;]) { box-sizing: border-box; padding: 0px; }input[type=\&quot;number\&quot;]::-webkit-inner-spin-button, input[type=\&quot;number\&quot;]::-webkit-outer-spin-button { appearance: none !important; }input[type=\&quot;number\&quot;] { appearance: textfield; }input[type=\&quot;search\&quot;] { appearance: textfield; outline-offset: -2px; }input[type=\&quot;search\&quot;]::-webkit-search-decoration { appearance: none !important; }::-webkit-file-upload-button { appearance: button; font: inherit; }details { display: block; }summary { display: list-item; }template { display: none; }[hidden] { display: none !important; }:where(blockquote, dl, dd, h1, h2, h3, h4, h5, h6, hr, figure, p, pre) { margin: 0px; }button { background: transparent; padding: 0px; }fieldset { margin: 0px; padding: 0px; }:where(ol, ul) { margin: 0px; padding: 0px; }textarea { resize: vertical; }:where(button, [role=\&quot;button\&quot;]) { cursor: pointer; }button::-moz-focus-inner { border: 0px !important; }table { border-collapse: collapse; }:where(h1, h2, h3, h4, h5, h6) { font-size: inherit; font-weight: inherit; }:where(button, input, optgroup, select, textarea) { padding: 0px; line-height: inherit; color: inherit; }:where(img, svg, video, canvas, audio, iframe, embed, object) { display: block; }:where(img, video) { max-width: 100%; height: auto; }[data-js-focus-visible] :focus:not([data-focus-visible-added]):not([data-focus-visible-disabled]) { outline: none; box-shadow: none; }:root, :host { --chakra-vh: 100vh; }@supports (height: -webkit-fill-available) {\n  :root, :host { --chakra-vh: -webkit-fill-available; }\n}@supports (height: -moz-fill-available) {\n  :root, :host { --chakra-vh: -moz-fill-available; }\n}@supports (height: 100dvh) {\n  :root, :host { --chakra-vh: 100dvh; }\n}&quot;,12,3,11,[52,53,54],&quot;body { font-family: var(--chakra-fonts-body); color: var(--chakra-colors-chakra-body-text); background: var(--chakra-colors-chakra-body-bg); transition-property: background-color; transition-duration: var(--chakra-transition-duration-normal); line-height: var(--chakra-lineHeights-base); }::-webkit-input-placeholder { color: var(--chakra-colors-chakra-placeholder-color); }::placeholder { color: var(--chakra-colors-chakra-placeholder-color); }::placeholder { color: var(--chakra-colors-chakra-placeholder-color); }*, ::before, ::after { border-color: var(--chakra-colors-chakra-border-color); }.video-react .video-react-big-play-button { left: 30% !important; top: 32% !important; }.sun-editor .se-dialog .se-dialog-inner .se-dialog-content { top: 20%; }.sun-editor .se-list-layer .se-list-inner { height: 180px; }.sun-editor-editable { background-color: var(--chakra-colors-transparent); padding: 0px; font-family: Open Sans; font-size: 14px; }@media screen and (min-width: 30em) {\n  .sun-editor-editable { font-size: 16px; }\n}@media screen and (min-width: 48em) {\n  .sun-editor-editable { font-size: 18px; }\n}.sun-editor .se-wrapper .se-wrapper-wysiwyg { padding: 15px; }.sun-editor .se-wrapper .se-placeholder { color: rgb(133, 133, 133) !important; font-family: Open Sans !important; font-size: 14px !important; font-style: normal !important; font-weight: 400 !important; line-height: var(--chakra-lineHeights-normal) !important; }.admin_overview_cms .optionListContainer { position: static !important; }.admin_overview_cms #react-select-3-listbox { position: static !important; }.admin_overview_cms #react-select-4-listbox { position: static !important; }.chakra-select__icon-wrapper { right: -10px !important; }.icon_down_dir { right: 13px !important; width: 9px !important; }.overview_cms .chakra-accordion__button[disabled] { cursor: auto !important; opacity: 1 !important; }.pdf-view canvas { max-width: 100%; }.flex-star { position: relative; display: flex; -moz-box-pack: justify; justify-content: space-between; flex: 1 1 0%; width: 100%; }.ck-content h1 { font-size: 32px; margin-bottom: var(--chakra-space-4); }.ck-content h2 { font-size: 28px; margin-bottom: var(--chakra-space-3); }.ck-content h3 { font-size: 24px; margin-bottom: var(--chakra-space-3); }.ck-content h4 { font-size: 22px; margin-bottom: var(--chakra-space-3); }.ck-content p { font-size: var(--chakra-fontSizes-sm); line-height: 1.4; }.ck-content ul { margin-left: var(--chakra-space-4); }.ck-content ol { margin-left: var(--chakra-space-4); }.ck-content a { color: var(--chakra-colors-brand-500); text-decoration: underline; }.ck-content_for_hero_section h1, .ck-content_for_hero_section h2, .ck-content_for_hero_section h3, .ck-content_for_hero_section h4, .ck-content_for_hero_section h5, .ck-content_for_hero_section h6 { font-size: 18px; margin-bottom: 0px; margin-top: 0px; font-family: Open Sans; font-weight: 400; }@media screen and (min-width: 30em) {\n  .ck-content_for_hero_section h1, .ck-content_for_hero_section h2, .ck-content_for_hero_section h3, .ck-content_for_hero_section h4, .ck-content_for_hero_section h5, .ck-content_for_hero_section h6 { font-size: 28px; }\n}@media screen and (min-width: 48em) {\n  .ck-content_for_hero_section h1, .ck-content_for_hero_section h2, .ck-content_for_hero_section h3, .ck-content_for_hero_section h4, .ck-content_for_hero_section h5, .ck-content_for_hero_section h6 { font-size: 36px; }\n}.ck-content_for_hero_section p strong { font-size: 24px; line-height: 46px; font-family: Open Sans; margin-bottom: 0px; }@media screen and (min-width: 30em) {\n  .ck-content_for_hero_section p strong { font-size: 36px; line-height: 54px; }\n}@media screen and (min-width: 48em) {\n  .ck-content_for_hero_section p strong { font-size: 48px; }\n}.ck-content_for_hero_section p { font-size: 16px; font-family: Open Sans; margin-bottom: 0px; }@media screen and (min-width: 30em) {\n  .ck-content_for_hero_section p { font-size: 16px; }\n}@media screen and (min-width: 48em) {\n  .ck-content_for_hero_section p { font-size: 18px; }\n}.swiper-pagination-bullet { width: 10px; height: 10px; background: rgb(196, 196, 196); }.swiper-pagination-bullet-active { background: rgb(30, 213, 97); }.player .vdo-container.haveVideo::before { content: none; }.audioPlayer .vc-container .ytp-thumbnail-overlay { display: none; }.audioPlayer .vc-container .ytp-chrome-bottom { bottom: 0px; height: 36px; width: 100%; z-index: 61; text-align: left; direction: ltr; background: rgb(10, 40, 73); }.audioPlayer .vc-container .ytp-right-controls { display: none; }.audioPlayer .vc-container a[mpml-on-click=\&quot;seek\&quot;] { display: none; }.audioPlayer .vc-container .ytp-swatch-background-color { background-color: rgb(30, 213, 97); }.audioPlayer .vc-container div[mpml-hide=\&quot;idle\&quot;] { display: block !important; }.audioPlayer .vc-container .ytp-progress-bar-container { display: block; position: absolute; width: 580px; bottom: 15px; height: 5px; right: 15px; }&quot;,13,3,12,[52],&quot;data-emotion=css 1kxonj9&quot;,[54],&quot;.css-1kxonj9 { width: 100%; position: relative; }&quot;,14,3,13,[52],&quot;data-emotion=css rrxt71&quot;,[54],&quot;.css-rrxt71 { position: sticky; top: -1px; left: 0px; right: 0px; z-index: 2; background: var(--chakra-colors-white); width: 100%; margin-inline: 0px; box-shadow: rgba(14, 143, 178, 0.04) 0px 16px 32px; display: flex; flex-direction: column; }@media screen and (min-width: 30em) {\n  .css-rrxt71 { top: 0px; }\n}&quot;,15,3,14,[52],&quot;data-emotion=css 1timx72&quot;,[54],&quot;.css-1timx72 { width: 100%; margin-inline: auto; max-width: 1440px; padding-inline: 10px; height: 64px; display: flex; -moz-box-align: center; align-items: center; -moz-box-pack: justify; justify-content: space-between; flex-direction: row; }@media screen and (min-width: 30em) {\n  .css-1timx72 { padding-inline: 32px; height: 64px; -moz-box-align: center; align-items: center; flex-direction: row; }\n}@media screen and (min-width: 48em) {\n  .css-1timx72 { padding-inline: 50px; height: 100px; -moz-box-align: center; align-items: center; flex-direction: row; }\n}&quot;,16,3,15,[52],&quot;data-emotion=css 70qvj9&quot;,[54],&quot;.css-70qvj9 { display: flex; -moz-box-align: center; align-items: center; }&quot;,17,3,16,[52],&quot;data-emotion=css b93lha&quot;,[54],&quot;.css-b93lha { margin-top: 8px; font-size: 24px; display: block; }@media screen and (min-width: 30em) {\n  .css-b93lha { display: block; }\n}@media screen and (min-width: 48em) {\n  .css-b93lha { display: block; }\n}@media screen and (min-width: 62em) {\n  .css-b93lha { display: none; }\n}&quot;,18,3,17,[52],&quot;data-emotion=css 1azm17w&quot;,[54],&quot;.css-1azm17w { display: flex; appearance: none; -moz-box-align: center; align-items: center; -moz-box-pack: center; justify-content: center; user-select: none; position: relative; white-space: nowrap; vertical-align: middle; outline: transparent solid 2px; outline-offset: 2px; line-height: 1.2; border-radius: 30px; font-weight: 600; transition-property: var(--chakra-transition-property-common); transition-duration: var(--chakra-transition-duration-normal); height: var(--chakra-sizes-10); min-width: 124px; font-size: var(--chakra-fontSizes-md); padding-inline-start: var(--chakra-space-4); padding-inline-end: var(--chakra-space-4); min-height: 38px; color: var(--chakra-colors-white); background: var(--chakra-colors-transparent); }.css-1azm17w:focus-visible, .css-1azm17w[data-focus-visible] { box-shadow: var(--chakra-shadows-outline); }.css-1azm17w:disabled, .css-1azm17w[disabled], .css-1azm17w[aria-disabled=\&quot;true\&quot;], .css-1azm17w[data-disabled] { opacity: 0.4; cursor: not-allowed; box-shadow: var(--chakra-shadows-none); }@media screen and (min-width: 30em) {\n  .css-1azm17w { min-height: 48px; }\n}.css-1azm17w:hover, .css-1azm17w[data-hover] { background: var(--chakra-colors-transparent); }.css-1azm17w:active, .css-1azm17w[data-active] { outline: transparent solid 2px; outline-offset: 2px; }&quot;,19,3,18,[52],&quot;data-emotion=css zo1lss&quot;,[54],&quot;.css-zo1lss { margin-top: -5px; margin-left: calc(var(--chakra-space-5) * -1); width: 100px; cursor: pointer; }@media screen and (min-width: 30em) {\n  .css-zo1lss { margin-top: -8px; margin-left: 0px; width: 120px; }\n}@media screen and (min-width: 48em) {\n  .css-zo1lss { margin-top: -16px; }\n}&quot;,20,3,19,[52],&quot;data-emotion=css 11wtlra&quot;,[54],&quot;.css-11wtlra { display: none; -moz-box-align: center; align-items: center; margin-left: 40px; }@media screen and (min-width: 30em) {\n  .css-11wtlra { display: none; }\n}@media screen and (min-width: 48em) {\n  .css-11wtlra { display: none; }\n}@media screen and (min-width: 62em) {\n  .css-11wtlra { display: flex; }\n}&quot;,21,3,20,[52],&quot;data-emotion=css jmtlaa&quot;,[54],&quot;.css-jmtlaa { transition-property: var(--chakra-transition-property-common); transition-duration: var(--chakra-transition-duration-fast); transition-timing-function: var(--chakra-transition-easing-ease-out); cursor: pointer; text-decoration: none; outline: transparent solid 2px; outline-offset: 2px; color: rgb(33, 33, 33); font-weight: 600; font-size: 16px; margin-right: var(--chakra-space-8); }.css-jmtlaa:focus-visible, .css-jmtlaa[data-focus-visible] { box-shadow: var(--chakra-shadows-outline); }.css-jmtlaa:hover, .css-jmtlaa[data-hover] { color: var(--chakra-colors-brand-500); }&quot;,22,3,21,[52],&quot;data-emotion=css 1202l0t&quot;,[54],&quot;.css-1202l0t { display: flex; -moz-box-pack: justify; justify-content: space-between; -moz-box-align: center; align-items: center; width: 100%; }@media screen and (min-width: 30em) {\n  .css-1202l0t { width: 100%; }\n}@media screen and (min-width: 48em) {\n  .css-1202l0t { width: auto; }\n}&quot;,23,3,22,[52],&quot;data-emotion=css 1oliy19&quot;,[54],&quot;.css-1oliy19 { width: 100%; display: flex; position: relative; isolation: isolate; --input-font-size: var(--chakra-fontSizes-lg); --input-padding: var(--chakra-space-4); --input-border-radius: var(--chakra-radii-md); --input-height: var(--chakra-sizes-12); }&quot;,24,3,23,[52],&quot;data-emotion=css 1jba83p&quot;,[54],&quot;.css-1jba83p { left: 0px; width: var(--input-height); height: var(--input-height); font-size: var(--input-font-size); display: flex; -moz-box-align: center; align-items: center; -moz-box-pack: center; justify-content: center; position: absolute; top: 0px; z-index: 2; pointer-events: none; padding-left: 0px; }&quot;,25,3,24,[52],&quot;data-emotion=css 12zz35c&quot;,[54],&quot;.css-12zz35c { width: 1em; height: 1em; display: inline-block; line-height: 1em; flex-shrink: 0; color: var(--chakra-colors-gray-500); font-size: 20px; }@media screen and (min-width: 30em) {\n  .css-12zz35c { font-size: 20px; }\n}@media screen and (min-width: 48em) {\n  .css-12zz35c { font-size: var(--chakra-fontSizes-2xl); }\n}&quot;,26,3,25,[52],&quot;data-emotion=css ppww4v&quot;,[54],&quot;.css-ppww4v { width: 100%; height: var(--input-height); padding-inline-start: var(--input-padding); padding-inline-end: var(--input-padding); min-width: 0px; outline: transparent solid 2px; outline-offset: 2px; position: relative; appearance: none; transition-property: var(--chakra-transition-property-common); transition-duration: var(--chakra-transition-duration-normal); --input-font-size: var(--chakra-fontSizes-lg); --input-padding: var(--chakra-space-4); --input-border-radius: var(--chakra-radii-md); --input-height: var(--chakra-sizes-12); border-radius: 30px; border-width: 1px; border-style: solid; border-image: none; border-color: var(--chakra-colors-gray-200); padding-left: var(--chakra-space-10); max-width: 100%; color: rgba(0, 0, 0, 0.92); font-size: var(--chakra-fontSizes-sm); cursor: default; margin-right: var(--chakra-space-2); }.css-ppww4v:disabled, .css-ppww4v[disabled], .css-ppww4v[aria-disabled=\&quot;true\&quot;], .css-ppww4v[data-disabled] { opacity: 0.4; cursor: not-allowed; }@media screen and (min-width: 30em) {\n  .css-ppww4v { width: 100%; margin-right: var(--chakra-space-2); }\n}@media screen and (min-width: 48em) {\n  .css-ppww4v { width: 280px; margin-right: var(--chakra-space-4); }\n}.css-ppww4v::-webkit-input-placeholder { font-weight: 400; color: rgba(0, 0, 0, 0.48); font-size: var(--chakra-fontSizes-sm); }.css-ppww4v::placeholder { font-weight: 400; color: rgba(0, 0, 0, 0.48); font-size: var(--chakra-fontSizes-sm); }.css-ppww4v::placeholder { font-weight: 400; color: rgba(0, 0, 0, 0.48); font-size: var(--chakra-fontSizes-sm); }@media screen and (min-width: 62em) {\n  .css-ppww4v { margin-right: 0px; }\n}&quot;,27,3,26,[52],&quot;data-emotion=css vsjy7i&quot;,[54],&quot;.css-vsjy7i { opacity: 0.6; height: 40px; margin-inline: 0px; border: 1px solid rgba(0, 0, 0, 0.08); }@media screen and (min-width: 30em) {\n  .css-vsjy7i { margin-inline-start: var(--chakra-space-4); margin-inline-end: var(--chakra-space-4); }\n}@media screen and (min-width: 48em) {\n  .css-vsjy7i { margin-inline-start: var(--chakra-space-4); margin-inline-end: var(--chakra-space-4); }\n}&quot;,28,3,27,[52],&quot;data-emotion=css htf5rn&quot;,[54],&quot;.css-htf5rn { display: flex; appearance: none; -moz-box-align: center; align-items: center; -moz-box-pack: center; justify-content: center; user-select: none; position: relative; white-space: nowrap; vertical-align: middle; outline: transparent solid 2px; outline-offset: 2px; line-height: 1.2; border-radius: 30px; font-weight: 600; transition-property: var(--chakra-transition-property-common); transition-duration: var(--chakra-transition-duration-normal); height: var(--chakra-sizes-10); padding-inline-start: var(--chakra-space-4); padding-inline-end: var(--chakra-space-4); min-height: 38px; background: var(--chakra-colors-buttonBrand-500); color: var(--chakra-colors-white); font-size: 14px; min-width: 80px; }.css-htf5rn:focus-visible, .css-htf5rn[data-focus-visible] { box-shadow: var(--chakra-shadows-outline); }.css-htf5rn:disabled, .css-htf5rn[disabled], .css-htf5rn[aria-disabled=\&quot;true\&quot;], .css-htf5rn[data-disabled] { opacity: 0.4; cursor: not-allowed; box-shadow: var(--chakra-shadows-none); }.css-htf5rn:hover, .css-htf5rn[data-hover] { background: var(--chakra-colors-brand-500); }.css-htf5rn:hover:disabled, .css-htf5rn[data-hover]:disabled, .css-htf5rn:hover[disabled], .css-htf5rn[data-hover][disabled], .css-htf5rn:hover[aria-disabled=\&quot;true\&quot;], .css-htf5rn[data-hover][aria-disabled=\&quot;true\&quot;], .css-htf5rn:hover[data-disabled], .css-htf5rn[data-hover][data-disabled] { background: var(--chakra-colors-buttonBrand-500); }@media screen and (min-width: 30em) {\n  .css-htf5rn { min-height: 48px; font-size: 14px; min-width: 80px; }\n}.css-htf5rn:active, .css-htf5rn[data-active] { background: var(--chakra-colors-buttonBrand-700); outline: transparent solid 2px; outline-offset: 2px; }@media screen and (min-width: 48em) {\n  .css-htf5rn { font-size: 16px; min-width: 124px; }\n}&quot;,29,3,28,[52],&quot;data-emotion=css 18awmsw&quot;,[54],&quot;.css-18awmsw { flex-direction: column; gap: 0.5rem; background: var(--chakra-colors-white); padding: var(--chakra-space-4); }@media screen and (min-width: 80em) {\n  .css-18awmsw { display: none; }\n}&quot;,30,3,29,[52],&quot;data-emotion=css 9vef3&quot;,[54],&quot;.css-9vef3 { display: flex; height: 100vh; width: var(--chakra-sizes-full); position: fixed; top: 0px; -moz-box-pack: center; justify-content: center; -moz-box-align: center; align-items: center; z-index: 2147483647; background: var(--chakra-colors-white); }&quot;,31,3,30,[52],&quot;data-emotion=css 1aaeaeg&quot;,[54],&quot;.css-1aaeaeg { display: block; width: var(--chakra-sizes-full); height: 144px; }@media screen and (min-width: 30em) {\n  .css-1aaeaeg { display: block; height: 334px; }\n}@media screen and (min-width: 48em) {\n  .css-1aaeaeg { display: none; }\n}&quot;,32,3,31,[52],&quot;data-emotion=css lvekyg&quot;,[54],&quot;.css-lvekyg { width: 100%; margin-inline: auto; max-width: 1440px; padding-inline-start: var(--chakra-space-4); padding-inline-end: var(--chakra-space-4); }@media screen and (min-width: 30em) {\n  .css-lvekyg { padding-inline-start: var(--chakra-space-8); padding-inline-end: var(--chakra-space-8); }\n}@media screen and (min-width: 48em) {\n  .css-lvekyg { padding-inline: 50px; }\n}&quot;,33,3,32,[52],&quot;data-emotion=css uhrpdo&quot;,[54],&quot;.css-uhrpdo { display: grid; gap: 0px; grid-template-columns: repeat(12, 1fr); padding-top: 16px; padding-bottom: 80px; width: var(--chakra-sizes-full); align-items: flex-start; position: relative; }@media screen and (min-width: 30em) {\n  .css-uhrpdo { gap: 0px; padding-top: 24px; padding-bottom: 24px; }\n}@media screen and (min-width: 48em) {\n  .css-uhrpdo { gap: 80px; padding-top: var(--chakra-space-8); padding-bottom: var(--chakra-space-8); }\n}&quot;,34,3,33,[52],&quot;data-emotion=css nyy23u&quot;,[54],&quot;.css-nyy23u { grid-column: span 12 / span 12; }@media screen and (min-width: 30em) {\n  .css-nyy23u { grid-column: span 12 / span 12; }\n}@media screen and (min-width: 48em) {\n  .css-nyy23u { grid-column: span 8 / span 8; }\n}&quot;,35,3,34,[52],&quot;data-emotion=css 8g8ihq&quot;,[54],&quot;.css-8g8ihq { display: flex; flex-direction: column; gap: 0.5rem; }&quot;,36,3,35,[52],&quot;data-emotion=css smymnf&quot;,[54],&quot;.css-smymnf { font-family: var(--chakra-fonts-heading); line-height: 1.33; font-size: 20px; font-weight: 700; color: var(--chakra-colors-blackAlpha-900); margin-bottom: var(--chakra-space-6); }@media screen and (min-width: 30em) {\n  .css-smymnf { font-size: 30px; margin-bottom: var(--chakra-space-6); }\n}@media screen and (min-width: 48em) {\n  .css-smymnf { line-height: 1.2; margin-bottom: var(--chakra-space-8); }\n}&quot;,37,3,36,[52],&quot;data-emotion=css 1fh9pnj&quot;,[54],&quot;.css-1fh9pnj { grid-column: span 4 / span 4; display: none; position: sticky; top: 150px; right: 0px; }@media screen and (min-width: 30em) {\n  .css-1fh9pnj { display: none; }\n}@media screen and (min-width: 48em) {\n  .css-1fh9pnj { display: block; }\n}&quot;,38,3,37,[52],&quot;data-emotion=css 1x0qn4c&quot;,[54],&quot;.css-1x0qn4c { background: rgb(254, 255, 255); box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 3px, rgba(0, 0, 0, 0.06) 0px 1px 2px; border-radius: 16px; cursor: pointer; }.css-1x0qn4c container { --card-bg: var(--chakra-colors-chakra-body-bg); background-color: var(--card-bg); box-shadow: var(--card-shadow); border-radius: var(--card-radius); color: var(--chakra-colors-chakra-body-text); border-width: var(--card-border-width, 0); border-color: var(--card-border-color); --card-radius: var(--chakra-radii-md); --card-padding: var(--chakra-space-5); }.css-1x0qn4c body { padding: var(--card-padding); flex: 1 1 0%; }.css-1x0qn4c header { padding: var(--card-padding); }.css-1x0qn4c footer { padding: var(--card-padding); }.css-1x0qn4c:hover, .css-1x0qn4c[data-hover] { box-shadow: rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px; }&quot;,39,3,38,[52],&quot;data-emotion=css 15vqpxh&quot;,[54],&quot;.css-15vqpxh { position: relative; width: var(--chakra-sizes-full); }&quot;,40,3,39,[52],&quot;data-emotion=css 5luvp9&quot;,[54],&quot;.css-5luvp9 { overflow: hidden; position: relative; transition: 0.2s; border-top-left-radius: 16px; border-top-right-radius: 16px; }&quot;,41,3,40,[52],&quot;data-emotion=css 1svymfu&quot;,[54],&quot;.css-1svymfu { width: var(--chakra-sizes-full); border-radius: var(--chakra-radii-2xl); transition: 0.2s; transform: scale(1); height: 180px; }[role=\&quot;group\&quot;]:hover .css-1svymfu, [role=\&quot;group\&quot;][data-hover] .css-1svymfu, [data-group]:hover .css-1svymfu, [data-group][data-hover] .css-1svymfu, .group:hover .css-1svymfu, .group[data-hover] .css-1svymfu { transform: scale(1.1); }&quot;,42,3,41,[52],&quot;data-emotion=css 1czfjlj&quot;,[54],&quot;.css-1czfjlj { display: grid; height: calc(100% - 180px); padding: 16px; }@media screen and (min-width: 30em) {\n  .css-1czfjlj { height: calc(100% - 274px); }\n}@media screen and (min-width: 48em) {\n  .css-1czfjlj { height: calc(100% - 180px); }\n}&quot;,43,3,42,[52],&quot;data-emotion=css o1jcy9&quot;,[54],&quot;.css-o1jcy9 { display: flex; flex-direction: column; gap: var(--chakra-space-4); width: var(--chakra-sizes-full); }&quot;,44,3,43,[52],&quot;data-emotion=css 1ayj8ec&quot;,[54],&quot;.css-1ayj8ec { font-size: 18px; font-weight: 700; min-height: 56px; }@media screen and (min-width: 30em) {\n  .css-1ayj8ec { font-size: 20px; }\n}&quot;,45,3,44,[52],&quot;data-emotion=css 7ln7vz&quot;,[54],&quot;.css-7ln7vz { display: flex; -moz-box-flex: 1; flex-grow: 1; gap: var(--chakra-space-2); -moz-box-align: center; align-items: center; }&quot;,46,3,45,[52],&quot;data-emotion=css 1y7jpv5&quot;,[54],&quot;.css-1y7jpv5 { font-size: var(--chakra-fontSizes-lg); font-weight: 700; }&quot;,47,3,46,[52],&quot;data-emotion=css 22m9ia&quot;,[54],&quot;.css-22m9ia { align-self: end; margin-top: var(--chakra-space-4); }&quot;,48,3,47,[52],&quot;data-emotion=css k6pzyi&quot;,[54],&quot;.css-k6pzyi { display: flex; appearance: none; -moz-box-align: center; align-items: center; -moz-box-pack: center; justify-content: center; user-select: none; position: relative; white-space: nowrap; vertical-align: middle; outline: transparent solid 2px; outline-offset: 2px; transition-property: var(--chakra-transition-property-common); transition-duration: var(--chakra-transition-duration-normal); min-width: 124px; padding-inline-start: var(--chakra-space-4); padding-inline-end: var(--chakra-space-4); min-height: 38px; background: var(--chakra-colors-buttonBrand-500); color: var(--chakra-colors-white); font-weight: 700; line-height: 28px; border-radius: 12px; width: var(--chakra-sizes-full); height: 32px; font-size: var(--chakra-fontSizes-md); }.css-k6pzyi:focus-visible, .css-k6pzyi[data-focus-visible] { box-shadow: var(--chakra-shadows-outline); }.css-k6pzyi:disabled, .css-k6pzyi[disabled], .css-k6pzyi[aria-disabled=\&quot;true\&quot;], .css-k6pzyi[data-disabled] { opacity: 0.4; cursor: not-allowed; box-shadow: var(--chakra-shadows-none); }.css-k6pzyi:hover, .css-k6pzyi[data-hover] { background: var(--chakra-colors-brand-500); }.css-k6pzyi:hover:disabled, .css-k6pzyi[data-hover]:disabled, .css-k6pzyi:hover[disabled], .css-k6pzyi[data-hover][disabled], .css-k6pzyi:hover[aria-disabled=\&quot;true\&quot;], .css-k6pzyi[data-hover][aria-disabled=\&quot;true\&quot;], .css-k6pzyi:hover[data-disabled], .css-k6pzyi[data-hover][data-disabled] { background: var(--chakra-colors-buttonBrand-500); }@media screen and (min-width: 30em) {\n  .css-k6pzyi { min-height: 48px; height: 40px; font-size: var(--chakra-fontSizes-lg); }\n}.css-k6pzyi:active, .css-k6pzyi[data-active] { outline: transparent solid 2px; outline-offset: 2px; }@media screen and (min-width: 48em) {\n  .css-k6pzyi { height: 48px; }\n}&quot;,49,3,48,[52],&quot;data-emotion=css 1gz4ru2&quot;,[54],&quot;.css-1gz4ru2 { gap: var(--chakra-space-2); width: var(--chakra-sizes-full); bottom: 0px; -moz-box-flex: 1; flex-grow: 1; background: var(--chakra-colors-white); position: sticky; align-items: flex-start; flex-direction: column; display: flex; padding: 12px 16px 16px; border-top: 1px solid var(--Stroke-Color, #E1E4E8); }@media screen and (min-width: 30em) {\n  .css-1gz4ru2 { -moz-box-align: center; align-items: center; flex-direction: row; display: flex; padding: 16px 32px 24px; }\n}@media screen and (min-width: 48em) {\n  .css-1gz4ru2 { display: none; }\n}&quot;,50,3,49,[52],&quot;data-emotion=css 2mpkrx&quot;,[54],&quot;.css-2mpkrx { display: flex; -moz-box-flex: 1; flex-grow: 1; gap: var(--chakra-space-3); -moz-box-align: center; align-items: center; }&quot;,51,3,50,[52],&quot;data-emotion=css 4po517&quot;,[54],&quot;.css-4po517 { font-size: 20px; color: rgb(20, 20, 20); font-weight: 700; }@media screen and (min-width: 30em) {\n  .css-4po517 { font-size: 24px; }\n}&quot;,52,3,51,[52],&quot;data-emotion=css 17xejub&quot;,[54],&quot;.css-17xejub { flex: 1 1 0%; place-self: stretch; }&quot;,53,3,52,[52],&quot;data-emotion=css 1jme0gw&quot;,[54],&quot;.css-1jme0gw { display: flex; -moz-box-pack: end; justify-content: flex-end; width: var(--chakra-sizes-full); }@media screen and (min-width: 30em) {\n  .css-1jme0gw { width: 446px; }\n}&quot;,54,3,53,[52],&quot;data-emotion=css b1nscp&quot;,[54],&quot;.css-b1nscp { display: flex; appearance: none; -moz-box-align: center; align-items: center; -moz-box-pack: center; justify-content: center; user-select: none; position: relative; white-space: nowrap; vertical-align: middle; outline: transparent solid 2px; outline-offset: 2px; transition-property: var(--chakra-transition-property-common); transition-duration: var(--chakra-transition-duration-normal); min-width: 124px; padding-inline-start: var(--chakra-space-4); padding-inline-end: var(--chakra-space-4); min-height: 38px; background: var(--chakra-colors-buttonBrand-500); color: var(--chakra-colors-white); font-weight: 700; line-height: 28px; border-radius: var(--chakra-radii-full); width: var(--chakra-sizes-full); height: 32px; font-size: var(--chakra-fontSizes-md); }.css-b1nscp:focus-visible, .css-b1nscp[data-focus-visible] { box-shadow: var(--chakra-shadows-outline); }.css-b1nscp:disabled, .css-b1nscp[disabled], .css-b1nscp[aria-disabled=\&quot;true\&quot;], .css-b1nscp[data-disabled] { opacity: 0.4; cursor: not-allowed; box-shadow: var(--chakra-shadows-none); }.css-b1nscp:hover, .css-b1nscp[data-hover] { background: var(--chakra-colors-brand-500); }.css-b1nscp:hover:disabled, .css-b1nscp[data-hover]:disabled, .css-b1nscp:hover[disabled], .css-b1nscp[data-hover][disabled], .css-b1nscp:hover[aria-disabled=\&quot;true\&quot;], .css-b1nscp[data-hover][aria-disabled=\&quot;true\&quot;], .css-b1nscp:hover[data-disabled], .css-b1nscp[data-hover][data-disabled] { background: var(--chakra-colors-buttonBrand-500); }@media screen and (min-width: 30em) {\n  .css-b1nscp { min-height: 48px; height: 40px; font-size: var(--chakra-fontSizes-lg); }\n}.css-b1nscp:active, .css-b1nscp[data-active] { outline: transparent solid 2px; outline-offset: 2px; }@media screen and (min-width: 48em) {\n  .css-b1nscp { height: 48px; }\n}&quot;,55,3,54,[52],&quot;data-emotion=css zsxg1u&quot;,[54],&quot;.css-zsxg1u { background: var(--chakra-colors-secondary-900); }&quot;,56,3,55,[52],&quot;data-emotion=css 3d8daa&quot;,[54],&quot;.css-3d8daa { width: 100%; margin-inline: auto; max-width: 1440px; padding-top: 16px; padding-bottom: 16px; padding-inline: 16px; }@media screen and (min-width: 30em) {\n  .css-3d8daa { padding-top: 32px; padding-bottom: 32px; padding-inline: 32px; }\n}@media screen and (min-width: 48em) {\n  .css-3d8daa { padding-top: 32px; padding-bottom: 32px; padding-inline: 32px; }\n}@media screen and (min-width: 62em) {\n  .css-3d8daa { padding-top: 48px; padding-bottom: 48px; padding-inline: 50px; }\n}&quot;,57,3,56,[52],&quot;data-emotion=css 1q2ovog&quot;,[54],&quot;.css-1q2ovog { gap: var(--chakra-space-8); grid-template-columns: repeat(1, 1fr); display: none; }@media screen and (min-width: 30em) {\n  .css-1q2ovog { grid-template-columns: auto 1fr; display: block; }\n}@media screen and (min-width: 48em) {\n  .css-1q2ovog { display: block; }\n}@media screen and (min-width: 62em) {\n  .css-1q2ovog { gap: var(--chakra-space-5); }\n}&quot;,58,3,57,[52],&quot;data-emotion=css 1vpiia9&quot;,[54],&quot;.css-1vpiia9 { display: grid; grid-template-columns: repeat(3, 1fr); gap: var(--chakra-space-5); }@media screen and (min-width: 30em) {\n  .css-1vpiia9 { grid-template-columns: repeat(4, 1fr); gap: 0px; }\n}&quot;,59,3,58,[52],&quot;data-emotion=css 18fssg4&quot;,[54],&quot;.css-18fssg4 { width: 160px; height: 100px; margin-left: 0px; }@media screen and (min-width: 30em) {\n  .css-18fssg4 { margin-left: 0px; }\n}@media screen and (min-width: 48em) {\n  .css-18fssg4 { margin-left: 0px; }\n}@media screen and (min-width: 62em) {\n  .css-18fssg4 { margin-left: 10px; }\n}&quot;,60,3,59,[52],&quot;data-emotion=css j4oitw&quot;,[54],&quot;.css-j4oitw { display: flex; justify-content: left; }@media screen and (min-width: 30em) {\n  .css-j4oitw { -moz-box-pack: center; justify-content: center; }\n}&quot;,61,3,60,[52],&quot;data-emotion=css zm3qx2&quot;,[54],&quot;.css-zm3qx2 { color: rgb(255, 255, 255); }&quot;,62,3,61,[52],&quot;data-emotion=css zsdqtt&quot;,[54],&quot;.css-zsdqtt { font-family: var(--chakra-fonts-heading); line-height: 1.33; font-size: var(--chakra-fontSizes-lg); font-weight: 600; }@media screen and (min-width: 48em) {\n  .css-zsdqtt { line-height: 1.2; }\n}&quot;,63,3,62,[52],&quot;data-emotion=css spn4bz&quot;,[54],&quot;.css-spn4bz { transition-property: var(--chakra-transition-property-common); transition-duration: var(--chakra-transition-duration-fast); transition-timing-function: var(--chakra-transition-easing-ease-out); cursor: pointer; text-decoration: none; outline: transparent solid 2px; outline-offset: 2px; color: inherit; }.css-spn4bz:hover, .css-spn4bz[data-hover] { text-decoration: underline; }.css-spn4bz:focus-visible, .css-spn4bz[data-focus-visible] { box-shadow: var(--chakra-shadows-outline); }&quot;,64,3,63,[52],&quot;data-emotion=css qyvo1j&quot;,[54],&quot;.css-qyvo1j { margin-top: var(--chakra-space-4); font-weight: 400; font-size: var(--chakra-fontSizes-md); color: rgba(255, 255, 255, 0.8); }&quot;,65,3,64,[52],&quot;data-emotion=css 4zv6ro&quot;,[54],&quot;.css-4zv6ro { margin-top: var(--chakra-space-3); font-weight: 400; font-size: var(--chakra-fontSizes-md); color: rgba(255, 255, 255, 0.8); }&quot;,66,3,65,[52],&quot;data-emotion=css 1l4w6pd&quot;,[54],&quot;.css-1l4w6pd { display: flex; -moz-box-pack: center; justify-content: center; }&quot;,67,3,66,[52],&quot;data-emotion=css 1pwzigd&quot;,[54],&quot;.css-1pwzigd { gap: var(--chakra-space-8); display: block; width: var(--chakra-sizes-full); }@media screen and (min-width: 30em) {\n  .css-1pwzigd { display: none; }\n}@media screen and (min-width: 48em) {\n  .css-1pwzigd { display: none; }\n}@media screen and (min-width: 62em) {\n  .css-1pwzigd { gap: var(--chakra-space-5); }\n}&quot;,68,3,67,[52],&quot;data-emotion=css onobsz&quot;,[54],&quot;.css-onobsz { width: 160px; height: 100px; }&quot;,69,3,68,[52],&quot;data-emotion=css 1i70iw6&quot;,[54],&quot;.css-1i70iw6 { display: grid; gap: var(--chakra-space-5); }@media screen and (min-width: 30em) {\n  .css-1i70iw6 { gap: 0px; }\n}&quot;,70,3,69,[52],&quot;data-emotion=css bns4tv&quot;,[54],&quot;.css-bns4tv { display: flex; justify-content: left; }&quot;,71,3,70,[52],&quot;data-emotion=css 1s0llg4&quot;,[54],&quot;.css-1s0llg4 { color: rgb(255, 255, 255); width: 100%; }&quot;,72,3,71,[52],&quot;data-emotion=css 17mg6aq&quot;,[54],&quot;.css-17mg6aq { border-top-width: 1px; border-color: inherit; overflow-anchor: none; }.css-17mg6aq:last-of-type { border-bottom-width: 1px; }&quot;,73,3,72,[52],&quot;data-emotion=css uttm9k&quot;,[54],&quot;.css-uttm9k { display: flex; -moz-box-align: center; align-items: center; width: 100%; outline: transparent solid 2px; outline-offset: 2px; transition-property: var(--chakra-transition-property-common); transition-duration: var(--chakra-transition-duration-normal); font-size: var(--chakra-fontSizes-md); padding-inline-start: var(--chakra-space-4); padding-inline-end: var(--chakra-space-4); padding-top: var(--chakra-space-2); padding-bottom: var(--chakra-space-2); }.css-uttm9k:focus-visible, .css-uttm9k[data-focus-visible] { box-shadow: var(--chakra-shadows-outline); }.css-uttm9k:hover, .css-uttm9k[data-hover] { background: var(--chakra-colors-blackAlpha-50); }.css-uttm9k:disabled, .css-uttm9k[disabled], .css-uttm9k[aria-disabled=\&quot;true\&quot;], .css-uttm9k[data-disabled] { opacity: 0.4; cursor: not-allowed; }&quot;,74,3,73,[52],&quot;data-emotion=css 1eziwv&quot;,[54],&quot;.css-1eziwv { flex: 1 1 0%; text-align: left; }&quot;,75,3,74,[52],&quot;data-emotion=css 186l2rg&quot;,[54],&quot;.css-186l2rg { width: 1em; height: 1em; display: inline-block; line-height: 1em; flex-shrink: 0; color: currentcolor; opacity: 1; transition: transform 0.2s; transform-origin: center center 0px; font-size: 1.25em; vertical-align: middle; }&quot;,76,3,75,[52],&quot;data-emotion=css mxa4qn&quot;,[54],&quot;.css-mxa4qn { padding-top: var(--chakra-space-2); padding-inline-start: var(--chakra-space-4); padding-inline-end: var(--chakra-space-4); padding-bottom: var(--chakra-space-5); }&quot;,77,3,76,[52],&quot;data-emotion=css 4h3l2o&quot;,[54],&quot;.css-4h3l2o { margin-top: var(--chakra-space-2); font-weight: 400; font-size: var(--chakra-fontSizes-md); color: rgba(255, 255, 255, 0.8); }&quot;,78,3,77,[52],&quot;data-emotion=css up0gbd&quot;,[54],&quot;.css-up0gbd { opacity: 0.6; border-width: 0px 0px 1px; border-image: none; border-style: solid; width: 100%; margin-top: 32px; margin-bottom: 32px; border-color: var(--chakra-colors-divider); margin-inline: 0px; }@media screen and (min-width: 30em) {\n  .css-up0gbd { margin-inline: 0px; }\n}@media screen and (min-width: 48em) {\n  .css-up0gbd { margin-inline: 0px; }\n}@media screen and (min-width: 62em) {\n  .css-up0gbd { margin-inline: 20px; }\n}&quot;,79,3,78,[52],&quot;data-emotion=css xjh8g1&quot;,[54],&quot;.css-xjh8g1 { margin-inline: 0px; }@media screen and (min-width: 30em) {\n  .css-xjh8g1 { margin-inline: 0px; }\n}@media screen and (min-width: 48em) {\n  .css-xjh8g1 { margin-inline: 0px; }\n}@media screen and (min-width: 62em) {\n  .css-xjh8g1 { margin-inline: 20px; }\n}&quot;,80,3,79,[52],&quot;data-emotion=css vsbrgx&quot;,[54],&quot;.css-vsbrgx { font-weight: 600; font-size: var(--chakra-fontSizes-lg); color: var(--chakra-colors-white); }&quot;,81,3,80,[52],&quot;data-emotion=css u2dpfn&quot;,[54],&quot;.css-u2dpfn { margin-top: var(--chakra-space-2); display: inline-block; }@media screen and (min-width: 30em) {\n  .css-u2dpfn { display: flex; }\n}&quot;,82,3,81,[52],&quot;data-emotion=css 57k78&quot;,[54],&quot;.css-57k78 { cursor: pointer; margin-right: var(--chakra-space-3); }&quot;,83,3,82,[52],&quot;data-emotion=css 4g6ai3&quot;,[54],&quot;.css-4g6ai3 { cursor: pointer; }&quot;,84,3,83,[52],&quot;data-emotion=css 10jxh2o&quot;,[54],&quot;.css-10jxh2o { display: flex; -moz-box-align: center; align-items: center; margin-top: var(--chakra-space-4); }@media screen and (min-width: 30em) {\n  .css-10jxh2o { margin-top: 0px; }\n}&quot;,85,3,84,[52],&quot;data-emotion=css rcn4mf&quot;,[54],&quot;.css-rcn4mf { display: flex; -moz-box-align: center; align-items: center; -moz-box-pack: center; justify-content: center; background: var(--chakra-colors-white); width: var(--chakra-sizes-10); height: var(--chakra-sizes-10); margin-right: var(--chakra-space-4); border-radius: var(--chakra-radii-full); cursor: pointer; }.css-rcn4mf:hover, .css-rcn4mf[data-hover] { background: var(--chakra-colors-brand-500); }&quot;,86,3,85,[52],&quot;data-emotion=css pvs0fu&quot;,[54],&quot;.css-pvs0fu { width: 1em; height: 1em; display: inline-block; line-height: 1em; flex-shrink: 0; color: rgb(0, 0, 0); font-size: var(--chakra-fontSizes-2xl); }[role=\&quot;group\&quot;]:hover .css-pvs0fu, [role=\&quot;group\&quot;][data-hover] .css-pvs0fu, [data-group]:hover .css-pvs0fu, [data-group][data-hover] .css-pvs0fu, .group:hover .css-pvs0fu, .group[data-hover] .css-pvs0fu { color: var(--chakra-colors-white); }&quot;,87,3,86,[52],&quot;data-emotion=css 14j79z9&quot;,[54],&quot;.css-14j79z9 { display: flex; -moz-box-align: center; align-items: center; -moz-box-pack: center; justify-content: center; background: var(--chakra-colors-white); width: var(--chakra-sizes-10); height: var(--chakra-sizes-10); border-radius: var(--chakra-radii-full); cursor: pointer; }.css-14j79z9:hover, .css-14j79z9[data-hover] { background: var(--chakra-colors-brand-500); }&quot;,88,3,87,[52],&quot;data-emotion=css b4gwlj&quot;,[54],&quot;.css-b4gwlj { margin-top: 34px; flex-direction: column; -moz-box-pack: justify; justify-content: space-between; color: var(--chakra-colors-white); font-weight: 400; margin-inline: 0px; font-size: var(--chakra-fontSizes-sm); display: inline-block; }@media screen and (min-width: 30em) {\n  .css-b4gwlj { flex-direction: column; margin-inline: 0px; display: inline-block; }\n}@media screen and (min-width: 48em) {\n  .css-b4gwlj { flex-direction: row; margin-inline: 0px; display: flex; }\n}@media screen and (min-width: 62em) {\n  .css-b4gwlj { margin-inline: 20px; }\n}&quot;,89,3,88,[52],&quot;data-emotion=css 1qm1lh&quot;,[54],&quot;.css-1qm1lh { margin-bottom: 16px; }&quot;,90,3,89,[52],&quot;data-emotion=css 1gsk3tx&quot;,[54],&quot;.css-1gsk3tx { display: flex; flex-direction: column; gap: var(--chakra-space-2); }@media screen and (min-width: 30em) {\n  .css-1gsk3tx { flex-direction: row; gap: var(--chakra-space-4); }\n}&quot;,91,3,90,[52],&quot;data-emotion=css 9qu2mc&quot;,[54],&quot;.css-9qu2mc { margin-right: var(--chakra-space-8); text-decoration: underline; }&quot;,92,3,91,[52],&quot;data-emotion=css 1081t4c&quot;,[54],&quot;.css-1081t4c { text-decoration: underline; }&quot;,93,3,92,[52],&quot;data-emotion=css zgsdvk&quot;,[54],&quot;.css-zgsdvk { display: flex; flex-direction: column; -moz-box-pack: justify; justify-content: space-between; margin-top: 34px; }@media screen and (min-width: 30em) {\n  .css-zgsdvk { flex-direction: column; }\n}@media screen and (min-width: 48em) {\n  .css-zgsdvk { flex-direction: row; }\n}&quot;,94,3,93,[52],&quot;data-emotion=css y86brd&quot;,[54],&quot;.css-y86brd { text-align: left; font-family: Inter; white-space: nowrap; font-size: 12px; font-style: normal; font-weight: 400; color: rgba(255, 255, 255, 0.8); }@media screen and (min-width: 30em) {\n  .css-y86brd { text-align: left; font-weight: 600; }\n}@media screen and (min-width: 48em) {\n  .css-y86brd { text-align: center; font-weight: 600; }\n}@media screen and (min-width: 62em) {\n  .css-y86brd { font-weight: 600; }\n}&quot;,95,3,94,[52],&quot;data-emotion=css 16vatv&quot;,[54],&quot;.css-16vatv { opacity: 0.6; border-width: 0px 0px 1px; border-image: none; border-color: inherit; border-style: solid; width: 100%; margin-inline-start: 0px; margin-inline-end: var(--chakra-space-2); margin-bottom: 10px; height: 2px; }@media screen and (min-width: 30em) {\n  .css-16vatv { margin-bottom: 8px; margin-inline-start: 0px; height: 7px; }\n}@media screen and (min-width: 48em) {\n  .css-16vatv { margin-bottom: 8px; margin-inline-start: 10px; height: 16px; }\n}@media screen and (min-width: 62em) {\n  .css-16vatv { margin-bottom: 0px; }\n}&quot;,96,3,95,[52],&quot;data-emotion=css 1b5r1qo&quot;,[54],&quot;.css-1b5r1qo { display: flex; flex-wrap: wrap; -moz-box-pack: center; justify-content: center; gap: var(--chakra-space-1); }@media screen and (min-width: 30em) {\n  .css-1b5r1qo { flex-wrap: wrap; gap: var(--chakra-space-2); }\n}@media screen and (min-width: 48em) {\n  .css-1b5r1qo { flex-wrap: wrap; gap: var(--chakra-space-3); }\n}&quot;,97,3,96,[52],&quot;data-emotion=css p9lpxa&quot;,[54],&quot;.css-p9lpxa { -moz-box-align: center; align-items: center; margin-bottom: var(--chakra-space-2); }&quot;,98,3,97,[52],&quot;data-emotion=css 1chz0q9&quot;,[54],&quot;.css-1chz0q9 { opacity: 0.6; border-width: 0px 0px 1px; border-image: none; border-color: inherit; border-style: solid; width: 100%; margin-inline-start: 0px; margin-inline-end: var(--chakra-space-2); margin-bottom: 12px; height: 2px; }@media screen and (min-width: 30em) {\n  .css-1chz0q9 { margin-inline-start: 0px; margin-bottom: 10px; height: 7px; }\n}@media screen and (min-width: 48em) {\n  .css-1chz0q9 { margin-inline-start: 10px; margin-bottom: 8px; height: 16px; }\n}@media screen and (min-width: 62em) {\n  .css-1chz0q9 { margin-bottom: 0px; }\n}&quot;,99,3,98,[52],&quot;data-emotion=css 1xx5azo&quot;,[54],&quot;.css-1xx5azo { margin: -6px auto auto; }&quot;,100,3,99,[52],&quot;data-emotion=css k008qs&quot;,[54],&quot;.css-k008qs { display: flex; }&quot;,101,3,100,[52],&quot;data-emotion=css taxz92&quot;,[54],&quot;.css-taxz92 { display: flex; -moz-box-align: center; align-items: center; -moz-box-pack: center; justify-content: center; position: absolute; bottom: 24px; right: 24px; background: var(--chakra-colors-white); width: 40px; height: 40px; border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 2px; cursor: pointer; }.css-taxz92:hover, .css-taxz92[data-hover] { background: var(--chakra-colors-brand-500); }&quot;,102,3,101,[52],&quot;data-emotion=css 1u3n076&quot;,[54],&quot;.css-1u3n076 { width: 1em; height: 1em; display: inline-block; line-height: 1em; flex-shrink: 0; color: currentcolor; font-size: var(--chakra-fontSizes-xl); font-weight: 700; }[role=\&quot;group\&quot;]:hover .css-1u3n076, [role=\&quot;group\&quot;][data-hover] .css-1u3n076, [data-group]:hover .css-1u3n076, [data-group][data-hover] .css-1u3n076, .group:hover .css-1u3n076, .group[data-hover] .css-1u3n076 { color: var(--chakra-colors-white); }&quot;,103,3,102,[52],&quot;data-emotion=css&quot;,[54],&quot;.css-1kcfwz9 { opacity: 0.6; border-width: 0px 0px 0px 1px; border-image: none; border-color: inherit; border-style: solid; height: 2px; margin-inline-start: 0px; margin-inline-end: var(--chakra-space-2); margin-bottom: 10px; }@media screen and (min-width: 30em) {\n  .css-1kcfwz9 { margin-bottom: 8px; margin-inline-start: 0px; height: 7px; }\n}@media screen and (min-width: 48em) {\n  .css-1kcfwz9 { margin-bottom: 8px; margin-inline-start: 10px; height: 16px; }\n}@media screen and (min-width: 62em) {\n  .css-1kcfwz9 { margin-bottom: 0px; }\n}.css-1d23hp7 { opacity: 0.6; border-width: 0px 0px 0px 1px; border-image: none; border-color: inherit; border-style: solid; height: 2px; margin-inline-start: 0px; margin-inline-end: var(--chakra-space-2); margin-bottom: 12px; }@media screen and (min-width: 30em) {\n  .css-1d23hp7 { margin-inline-start: 0px; margin-bottom: 10px; height: 7px; }\n}@media screen and (min-width: 48em) {\n  .css-1d23hp7 { margin-inline-start: 10px; margin-bottom: 8px; height: 16px; }\n}@media screen and (min-width: 62em) {\n  .css-1d23hp7 { margin-bottom: 0px; }\n}.css-de8utg { font-size: var(--chakra-fontSizes-md); font-weight: 400; text-decoration: line-through 1px; }.css-1wtukt9 { font-size: var(--chakra-fontSizes-xs); font-weight: 500; color: rgb(92, 92, 92); text-decoration: line-through 1px; }@media screen and (min-width: 30em) {\n  .css-1wtukt9 { font-size: var(--chakra-fontSizes-sm); }\n}.css-1389fwm { display: none; border-bottom-width: ; border-bottom-style: ; padding-top: var(--chakra-space-3); border-color: rgb(238, 238, 238); padding-bottom: var(--chakra-space-3); }@media screen and (min-width: 30em) {\n  .css-1389fwm { display: block; }\n}.css-1naat61 { width: 100%; margin-inline: auto; max-width: 1440px; padding-inline: 15px; }@media screen and (min-width: 30em) {\n  .css-1naat61 { padding-inline: 100px; }\n}.css-itvw0n { font-size: var(--chakra-fontSizes-sm); }.css-18biwo { display: inline-flex; -moz-box-align: center; align-items: center; }.css-1u2cnya { transition-property: var(--chakra-transition-property-common); transition-duration: var(--chakra-transition-duration-fast); transition-timing-function: var(--chakra-transition-easing-ease-out); outline: transparent solid 2px; outline-offset: 2px; color: inherit; text-decoration: var(--breadcrumb-link-decor); --breadcrumb-link-decor: none; }.css-1u2cnya:not([aria-current=\&quot;page\&quot;]) { cursor: pointer; }.css-1u2cnya:not([aria-current=\&quot;page\&quot;]):hover, .css-1u2cnya:not([aria-current=\&quot;page\&quot;])[data-hover] { --breadcrumb-link-decor: underline; }.css-1u2cnya:not([aria-current=\&quot;page\&quot;]):focus-visible, .css-1u2cnya:not([aria-current=\&quot;page\&quot;])[data-focus-visible] { box-shadow: var(--chakra-shadows-outline); }.css-syhbcg { margin-inline: 8px; }.css-35ezg3 { font-weight: 600; }&quot;,104,3,103,[52],&quot;id=_goober&quot;,&quot;@keyframes go2264125279 {\n0% { transform: scale(0) rotate(45deg); opacity: 0; }\n100% { transform: scale(1) rotate(45deg); opacity: 1; }\n}@keyframes go3020080000 {\n0% { transform: scale(0); opacity: 0; }\n100% { transform: scale(1); opacity: 1; }\n}@keyframes go463499852 {\n0% { transform: scale(0) rotate(90deg); opacity: 0; }\n100% { transform: scale(1) rotate(90deg); opacity: 1; }\n}@keyframes go1268368563 {\n0% { transform: rotate(0deg); }\n100% { transform: rotate(360deg); }\n}@keyframes go1310225428 {\n0% { transform: scale(0) rotate(45deg); opacity: 0; }\n100% { transform: scale(1) rotate(45deg); opacity: 1; }\n}@keyframes go651618207 {\n0% { height: 0px; width: 0px; opacity: 0; }\n40% { height: 0px; width: 6px; opacity: 1; }\n100% { opacity: 1; height: 10px; }\n}@keyframes go901347462 {\n0% { transform: scale(0.6); opacity: 0.4; }\n100% { transform: scale(1); opacity: 1; }\n}.go4109123758 { z-index: 9999; }.go4109123758 &gt; * { pointer-events: auto; }&quot;,105,3,104,[27],&quot;as=script&quot;,&quot;rel=prefetch&quot;,&quot;href=/_next/static/chunks/6455-e8f96a54770f0dcf.js&quot;,106,3,105,[27,713,714],&quot;href=/_next/static/chunks/9578-fd691fea69894def.js&quot;,107,3,106,[27,713,714],&quot;href=/_next/static/chunks/9132-3c556e8217a583e2.js&quot;,108,3,107,[27,713,714],&quot;href=/_next/static/chunks/pages/live-courses-a68b95d32898885f.js&quot;,109,3,108,[52],&quot;.swal2-popup.swal2-toast{box-sizing:border-box;grid-column:1/4 !important;grid-row:1/4 !important;grid-template-columns:min-content auto min-content;padding:1em;overflow-y:hidden;background:#fff;box-shadow:0 0 1px rgba(0,0,0,.075),0 1px 2px rgba(0,0,0,.075),1px 2px 4px rgba(0,0,0,.075),1px 3px 8px rgba(0,0,0,.075),2px 4px 16px rgba(0,0,0,.075);pointer-events:all}.swal2-popup.swal2-toast&gt;*{grid-column:2}.swal2-popup.swal2-toast .swal2-title{margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-loading{justify-content:center}.swal2-popup.swal2-toast .swal2-input{height:2em;margin:.5em;font-size:1em}.swal2-popup.swal2-toast .swal2-validation-message{font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-popup.swal2-toast .swal2-html-container{margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-html-container:empty{padding:0}.swal2-popup.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-popup.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:bold}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-popup.swal2-toast .swal2-styled{margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.8em;left:-0.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{animation:swal2-toast-hide .1s forwards}.swal2-container{display:grid;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;box-sizing:border-box;grid-template-areas:\&quot;top-start     top            top-end\&quot; \&quot;center-start  center         center-end\&quot; \&quot;bottom-start  bottom-center  bottom-end\&quot;;grid-template-rows:minmax(min-content, auto) minmax(min-content, auto) minmax(min-content, auto);height:100%;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show,.swal2-container.swal2-noanimation{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:rgba(0,0,0,0) !important}.swal2-container.swal2-top-start,.swal2-container.swal2-center-start,.swal2-container.swal2-bottom-start{grid-template-columns:minmax(0, 1fr) auto auto}.swal2-container.swal2-top,.swal2-container.swal2-center,.swal2-container.swal2-bottom{grid-template-columns:auto minmax(0, 1fr) auto}.swal2-container.swal2-top-end,.swal2-container.swal2-center-end,.swal2-container.swal2-bottom-end{grid-template-columns:auto auto minmax(0, 1fr)}.swal2-container.swal2-top-start&gt;.swal2-popup{align-self:start}.swal2-container.swal2-top&gt;.swal2-popup{grid-column:2;align-self:start;justify-self:center}.swal2-container.swal2-top-end&gt;.swal2-popup,.swal2-container.swal2-top-right&gt;.swal2-popup{grid-column:3;align-self:start;justify-self:end}.swal2-container.swal2-center-start&gt;.swal2-popup,.swal2-container.swal2-center-left&gt;.swal2-popup{grid-row:2;align-self:center}.swal2-container.swal2-center&gt;.swal2-popup{grid-column:2;grid-row:2;align-self:center;justify-self:center}.swal2-container.swal2-center-end&gt;.swal2-popup,.swal2-container.swal2-center-right&gt;.swal2-popup{grid-column:3;grid-row:2;align-self:center;justify-self:end}.swal2-container.swal2-bottom-start&gt;.swal2-popup,.swal2-container.swal2-bottom-left&gt;.swal2-popup{grid-column:1;grid-row:3;align-self:end}.swal2-container.swal2-bottom&gt;.swal2-popup{grid-column:2;grid-row:3;justify-self:center;align-self:end}.swal2-container.swal2-bottom-end&gt;.swal2-popup,.swal2-container.swal2-bottom-right&gt;.swal2-popup{grid-column:3;grid-row:3;align-self:end;justify-self:end}.swal2-container.swal2-grow-row&gt;.swal2-popup,.swal2-container.swal2-grow-fullscreen&gt;.swal2-popup{grid-column:1/4;width:100%}.swal2-container.swal2-grow-column&gt;.swal2-popup,.swal2-container.swal2-grow-fullscreen&gt;.swal2-popup{grid-row:1/4;align-self:stretch}.swal2-container.swal2-no-transition{transition:none !important}.swal2-popup{display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0, 100%);width:32em;max-width:100%;padding:0 0 1.25em;border:none;border-radius:5px;background:#fff;color:#545454;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:none}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-title{position:relative;max-width:100%;margin:0;padding:.8em 1em 0;color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:auto;margin:1.25em auto 0;padding:0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2))}.swal2-loader{display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 rgba(0,0,0,0) #2778c4 rgba(0,0,0,0)}.swal2-styled{margin:.3125em;padding:.625em 1.1em;transition:box-shadow .1s;box-shadow:0 0 0 3px rgba(0,0,0,0);font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#7066e0;color:#fff;font-size:1em}.swal2-styled.swal2-confirm:focus{box-shadow:0 0 0 3px rgba(112,102,224,.5)}.swal2-styled.swal2-deny{border:0;border-radius:.25em;background:initial;background-color:#dc3741;color:#fff;font-size:1em}.swal2-styled.swal2-deny:focus{box-shadow:0 0 0 3px rgba(220,55,65,.5)}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#6e7881;color:#fff;font-size:1em}.swal2-styled.swal2-cancel:focus{box-shadow:0 0 0 3px rgba(110,120,129,.5)}.swal2-styled.swal2-default-outline:focus{box-shadow:0 0 0 3px rgba(100,150,200,.5)}.swal2-styled:focus{outline:none}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1em 0 0;padding:1em 1em 0;border-top:1px solid #eee;color:inherit;font-size:1em}.swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto !important;overflow:hidden;border-bottom-right-radius:5px;border-bottom-left-radius:5px}.swal2-timer-progress-bar{width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:2em auto 1em}.swal2-close{z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:color .1s,box-shadow .1s;border:none;border-radius:5px;background:rgba(0,0,0,0);color:#ccc;font-family:serif;font-family:monospace;font-size:2.5em;cursor:pointer;justify-self:end}.swal2-close:hover{transform:none;background:rgba(0,0,0,0);color:#f27474}.swal2-close:focus{outline:none;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}.swal2-close::-moz-focus-inner{border:0}.swal2-html-container{z-index:1;justify-content:center;margin:1em 1.6em .3em;padding:0;overflow:auto;color:inherit;font-size:1.125em;font-weight:normal;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word}.swal2-input,.swal2-file,.swal2-textarea,.swal2-select,.swal2-radio,.swal2-checkbox{margin:1em 2em 3px}.swal2-input,.swal2-file,.swal2-textarea{box-sizing:border-box;width:auto;transition:border-color .1s,box-shadow .1s;border:1px solid #d9d9d9;border-radius:.1875em;background:rgba(0,0,0,0);box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(0,0,0,0);color:inherit;font-size:1.125em}.swal2-input.swal2-inputerror,.swal2-file.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474 !important;box-shadow:0 0 2px #f27474 !important}.swal2-input:focus,.swal2-file:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:none;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(100,150,200,.5)}.swal2-input::placeholder,.swal2-file::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em 2em 3px;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-file{width:75%;margin-right:auto;margin-left:auto;background:rgba(0,0,0,0);font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:rgba(0,0,0,0);color:inherit;font-size:1.125em}.swal2-radio,.swal2-checkbox{align-items:center;justify-content:center;background:#fff;color:inherit}.swal2-radio label,.swal2-checkbox label{margin:0 .6em;font-size:1.125em}.swal2-radio input,.swal2-checkbox input{flex-shrink:0;margin:0 .4em}.swal2-input-label{display:flex;justify-content:center;margin:1em auto 0}.swal2-validation-message{align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:\&quot;!\&quot;;display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;border:0.25em solid rgba(0,0,0,0);border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-warning.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-warning.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .5s}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-info.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-info.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .8s}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-question.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-question.swal2-icon-show .swal2-icon-content{animation:swal2-animate-question-mark .8s}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-0.25em;left:-0.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:rgba(0,0,0,0);font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}[class^=swal2]{-webkit-tap-highlight-color:rgba(0,0,0,0)}.swal2-show{animation:swal2-show .3s}.swal2-hide{animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@keyframes swal2-toast-show{0%{transform:translateY(-0.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(0.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0deg)}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-0.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-show{0%{transform:scale(0.7)}45%{transform:scale(1.05)}80%{transform:scale(0.95)}100%{transform:scale(1)}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(0.5);opacity:0}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-0.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(0.4);opacity:0}50%{margin-top:1.625em;transform:scale(0.4);opacity:0}80%{margin-top:-0.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0deg);opacity:1}}@keyframes swal2-rotate-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto !important}body.swal2-no-backdrop .swal2-container{background-color:rgba(0,0,0,0) !important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll !important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)&gt;[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static !important}}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:rgba(0,0,0,0);pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-start,body.swal2-toast-shown .swal2-container.swal2-top-left{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-start,body.swal2-toast-shown .swal2-container.swal2-center-left{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%, -50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-start,body.swal2-toast-shown .swal2-container.swal2-bottom-left{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}&quot;,110,3,109,[27,713,714],&quot;href=/_next/static/chunks/1a48c3c1-cef148f0351b2795.js&quot;,111,3,110,[27,713,714],&quot;href=/_next/static/chunks/pages/test-packages-f94ead8ed4d83932.js&quot;,112,3,111,[27,713,714],&quot;href=/_next/static/chunks/pages/courses-17cca965f181f676.js&quot;,113,3,112,[27,713,714],&quot;href=/_next/static/chunks/6392-3f25d9ae6d31a7a6.js&quot;,114,3,113,[27,713,714],&quot;href=/_next/static/chunks/pages/study-resources-9af67fa03cec3b33.js&quot;,115,3,114,[27,713,714],&quot;href=/_next/static/chunks/pages/about-6b18d84a42491758.js&quot;,116,3,115,[27,713,714],&quot;href=/_next/static/chunks/pages/events-dbd9d39b873c52d5.js&quot;,117,3,116,[27,713,714],&quot;href=/_next/static/chunks/d64684d8-d76a8bd37cbfcabe.js&quot;,118,3,117,[27,713,714],&quot;href=/_next/static/chunks/8445-d9c900ad3f463580.js&quot;,119,3,118,[27,713,714],&quot;href=/_next/static/chunks/pages/package-enrollment/%5Bslug%5D-94ac5f13aea42c48.js&quot;,120,3,119,[27,713,714],&quot;href=/_next/static/chunks/2732-7a917d652c507f61.js&quot;,121,3,120,[27,713,714],&quot;href=/_next/static/chunks/pages/blogs-06de03b2dcb2a325.js&quot;,122,3,121,[27,713,714],&quot;href=/_next/static/chunks/0c428ae2-ebdb81925894ecf0.js&quot;,123,3,122,[27,713,714],&quot;href=/_next/static/chunks/pages/contact-us-f3ca81bd465694c7.js&quot;,124,3,123,[27,713,714],&quot;href=/_next/static/chunks/pages/refund-policy-8db466777b2dd6a3.js&quot;,125,3,124,[27,713,714],&quot;href=/_next/static/chunks/6625-5cc514256ccf3a0a.js&quot;,126,3,125,[27,713,714],&quot;href=/_next/static/chunks/8922-2832e711755a25ed.js&quot;,127,3,126,[27,713,714],&quot;href=/_next/static/chunks/2889-6f2ee5c1d9571cce.js&quot;,128,3,127,[27,713,714],&quot;href=/_next/static/chunks/pages/affiliate/landing-977ae56ce7713624.js&quot;,129,3,128,[27,713,714],&quot;href=/_next/static/chunks/pages/faq-7d20f8d30dbe3036.js&quot;,130,3,129,[27,713,714],&quot;href=/_next/static/chunks/pages/terms-and-conditions-679ad749b372a609.js&quot;,131,3,130,[27,713,714],&quot;href=/_next/static/chunks/pages/privacy-policy-44c92ac902648c02.js&quot;,132,3,131,[27,713,714],&quot;href=/_next/static/chunks/5371-8ce57f179229c5d0.js&quot;,133,3,132,[27,713,714],&quot;href=/_next/static/chunks/2139-18e54eabe65fa202.js&quot;,134,3,133,[27,713,714],&quot;href=/_next/static/chunks/pages/index-58918456d3e79f86.js&quot;,135,4,[48],136,4,135,&quot;DIV&quot;,&quot;id=__next&quot;,137,4,136,&quot;NEXT-ROUTE-ANNOUNCER&quot;,138,4,137,[867],&quot;class=chakra-portal&quot;,139,4,138,&quot;*T&quot;,&quot;\n    &quot;,140,4,139,[867],&quot;id=fb-root&quot;,141,4,140,[881],&quot;\n\n    \n    &quot;,142,4,141,[867],&quot;id=fb-customer-chat&quot;,&quot;class=fb-customerchat&quot;,&quot;page_id=104043352535894&quot;,&quot;attribution=biz_inbox&quot;,143,4,142,[881],&quot;\n\n    &quot;,144,4,143,[881,892],145,5,[881],&quot;english-math-test&quot;,146,136,[52],&quot;#nprogress {\n      pointer-events: none;\n    }\n    #nprogress .bar {\n      background: #42d662;\n      position: fixed;\n      z-index: 9999;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 3px;\n    }\n    #nprogress .peg {\n      display: block;\n      position: absolute;\n      right: 0px;\n      width: 100px;\n      height: 100%;\n      box-shadow: 0 0 10px #42d662, 0 0 5px #42d662;\n      opacity: 1;\n      -webkit-transform: rotate(3deg) translate(0px, -4px);\n      -ms-transform: rotate(3deg) translate(0px, -4px);\n      transform: rotate(3deg) translate(0px, -4px);\n    }\n    #nprogress .spinner {\n      display: block;\n      position: fixed;\n      z-index: 1031;\n      top: 15px;\n      right: 15px;\n    }\n    #nprogress .spinner-icon {\n      width: 18px;\n      height: 18px;\n      box-sizing: border-box;\n      border: solid 2px transparent;\n      border-top-color: #42d662;\n      border-left-color: #42d662;\n      border-radius: 50%;\n      -webkit-animation: nprogresss-spinner 400ms linear infinite;\n      animation: nprogress-spinner 400ms linear infinite;\n    }\n    .nprogress-custom-parent {\n      overflow: hidden;\n      position: relative;\n    }\n    .nprogress-custom-parent #nprogress .spinner,\n    .nprogress-custom-parent #nprogress .bar {\n      position: absolute;\n    }\n    @-webkit-keyframes nprogress-spinner {\n      0% {\n        -webkit-transform: rotate(0deg);\n      }\n      100% {\n        -webkit-transform: rotate(360deg);\n      }\n    }\n    @keyframes nprogress-spinner {\n      0% {\n        transform: rotate(0deg);\n      }\n      100% {\n        transform: rotate(360deg);\n      }\n    }&quot;,147,136,146,[867],&quot;style=position:fixed;z-index:9999;top:16px;left:16px;right:16px;bottom:16px;pointer-events:none&quot;,148,136,147,[867],&quot;class=css-1kxonj9&quot;,149,136,148,&quot;SPAN&quot;,&quot;id=__chakra_env&quot;,&quot;hidden=&quot;,150,137,&quot;P&quot;,&quot;aria-live=assertive&quot;,&quot;id=__next-route-announcer__&quot;,&quot;role=alert&quot;,&quot;style=border: 0px; clip: rect(0px, 0px, 0px, 0px); height: 1px; margin: -1px; overflow: hidden; padding: 0px; position: absolute; width: 1px; white-space: nowrap; overflow-wrap: normal;&quot;,151,138,[867],&quot;role=region&quot;,&quot;aria-live=polite&quot;,&quot;id=chakra-toast-manager-top&quot;,&quot;style=position: fixed; z-index: var(--toast-z-index, 5500); pointer-events: none; display: flex; flex-direction: column; margin: 0px auto; top: env(safe-area-inset-top, 0px); right: env(safe-area-inset-right, 0px); left: env(safe-area-inset-left, 0px);&quot;,152,138,151,[867,944,945],&quot;id=chakra-toast-manager-top-left&quot;,&quot;style=position: fixed; z-index: var(--toast-z-index, 5500); pointer-events: none; display: flex; flex-direction: column; top: env(safe-area-inset-top, 0px); left: env(safe-area-inset-left, 0px);&quot;,153,138,152,[867,944,945],&quot;id=chakra-toast-manager-top-right&quot;,&quot;style=position: fixed; z-index: var(--toast-z-index, 5500); pointer-events: none; display: flex; flex-direction: column; top: env(safe-area-inset-top, 0px); right: env(safe-area-inset-right, 0px);&quot;,154,138,153,[867,944,945],&quot;id=chakra-toast-manager-bottom-left&quot;,&quot;style=position: fixed; z-index: var(--toast-z-index, 5500); pointer-events: none; display: flex; flex-direction: column; bottom: env(safe-area-inset-bottom, 0px); left: env(safe-area-inset-left, 0px);&quot;,155,138,154,[867,944,945],&quot;id=chakra-toast-manager-bottom&quot;,&quot;style=position: fixed; z-index: var(--toast-z-index, 5500); pointer-events: none; display: flex; flex-direction: column; margin: 0px auto; bottom: env(safe-area-inset-bottom, 0px); right: env(safe-area-inset-right, 0px); left: env(safe-area-inset-left, 0px);&quot;,156,138,155,[867,944,945],&quot;id=chakra-toast-manager-bottom-right&quot;,&quot;style=position: fixed; z-index: var(--toast-z-index, 5500); pointer-events: none; display: flex; flex-direction: column; bottom: env(safe-area-inset-bottom, 0px); right: env(safe-area-inset-right, 0px);&quot;,157,142,[881,882],158,148,[867],&quot;class=css-rrxt71&quot;,159,148,158,[867],&quot;class=css-1389fwm&quot;,160,148,159,[867],&quot;class=css-0&quot;,161,148,160,[867],&quot;class=css-zsxg1u&quot;,162,148,161,[867,994],163,150,[881],&quot;Package Overview | Keeron&quot;,164,158,[867,994],165,159,[867],&quot;class=chakra-container css-1naat61&quot;,166,160,[867],167,161,[867],&quot;class=chakra-container css-3d8daa&quot;,168,162,[867],&quot;class=css-k008qs&quot;,169,162,168,[867],&quot;role=group&quot;,&quot;class=css-taxz92&quot;,170,164,[867],&quot;class=chakra-container css-1timx72&quot;,171,164,170,[867],&quot;class=chakra-collapse&quot;,&quot;style=overflow:hidden;display:none;opacity:0;height:0px&quot;,172,165,&quot;NAV&quot;,&quot;class=chakra-breadcrumb css-itvw0n&quot;,173,166,[867],&quot;class=css-1aaeaeg&quot;,174,166,173,[867],&quot;class=chakra-container css-lvekyg&quot;,175,166,174,[867],&quot;class=css-1gz4ru2&quot;,176,167,[867],&quot;class=css-1q2ovog&quot;,177,167,176,[867],&quot;class=css-1pwzigd&quot;,178,167,177,&quot;HR&quot;,&quot;aria-orientation=horizontal&quot;,&quot;class=chakra-divider css-up0gbd&quot;,179,167,178,[867],&quot;class=css-xjh8g1&quot;,180,167,179,[867],&quot;class=css-b4gwlj&quot;,181,167,180,[867],&quot;class=css-zgsdvk&quot;,182,169,&quot;svg:svg&quot;,&quot;stroke=currentColor&quot;,&quot;fill=none&quot;,&quot;stroke-width=2&quot;,&quot;viewBox=0 0 24 24&quot;,&quot;stroke-linecap=round&quot;,&quot;stroke-linejoin=round&quot;,&quot;focusable=false&quot;,&quot;class=chakra-icon css-1u3n076&quot;,&quot;height=1em&quot;,&quot;width=1em&quot;,&quot;xmlns=http://www.w3.org/2000/svg&quot;,183,170,[867],&quot;class=css-70qvj9&quot;,184,170,183,[867],&quot;class=css-1202l0t&quot;,185,171,[867],&quot;class=chakra-stack css-18awmsw&quot;,186,172,&quot;OL&quot;,&quot;class=chakra-breadcrumb__list css-70qvj9&quot;,187,173,&quot;IMG&quot;,&quot;srcset=${scheme}://selisefalcon.blob.core.windows.net/ecap-falcon/stage/F7A99120-25DE-432A-92CA-9A108A62721C/9a994a77-9aa4-4a75-b5fa-4be467e053a4/75e9b3a0-77f6-4714-82ef-e8c53fa4e926/download (4).jpg?sv=2018-03-28&amp;sr=b&amp;sig=Bgdp%2BJ37w6pdw%2Fm29BCuNQaJP4%2Fru2AKBuhwLYna0A8%3D&amp;se=2024-05-18T09%3A19%3A18Z&amp;sp=r 1x, ${scheme}://selisefalcon.blob.core.windows.net/ecap-falcon/stage/F7A99120-25DE-432A-92CA-9A108A62721C/9a994a77-9aa4-4a75-b5fa-4be467e053a4/75e9b3a0-77f6-4714-82ef-e8c53fa4e926/download (4).jpg?sv=2018-03-28&amp;sr=b&amp;sig=Bgdp%2BJ37w6pdw%2Fm29BCuNQaJP4%2Fru2AKBuhwLYna0A8%3D&amp;se=2024-05-18T09%3A19%3A18Z&amp;sp=r 2x&quot;,&quot;src=${scheme}://selisefalcon.blob.core.windows.net/ecap-falcon/stage/F7A99120-25DE-432A-92CA-9A108A62721C/9a994a77-9aa4-4a75-b5fa-4be467e053a4/75e9b3a0-77f6-4714-82ef-e8c53fa4e926/download (4).jpg?sv=2018-03-28&amp;sr=b&amp;sig=Bgdp%2BJ37w6pdw%2Fm29BCuNQaJP4%2Fru2AKBuhwLYna0A8%3D&amp;se=2024-05-18T09%3A19%3A18Z&amp;sp=r&quot;,&quot;width=40&quot;,&quot;height=40&quot;,&quot;decoding=async&quot;,&quot;data-nimg=1&quot;,&quot;loading=eager&quot;,&quot;style=object-fit: fill; object-position: 100% center; width: 100%; height: 100%;&quot;,188,174,[867],&quot;class=css-uhrpdo&quot;,189,175,[867],&quot;class=css-2mpkrx&quot;,190,175,189,[867],&quot;class=css-17xejub&quot;,191,175,190,[867],&quot;class=css-1jme0gw&quot;,192,176,[867],&quot;class=css-1vpiia9&quot;,193,177,[867],&quot;class=css-onobsz&quot;,194,177,193,[867],&quot;class=css-1i70iw6&quot;,195,179,[936],&quot;class=chakra-text css-vsbrgx&quot;,196,179,195,[867],&quot;class=css-u2dpfn&quot;,197,180,[936],&quot;class=chakra-text css-1qm1lh&quot;,198,180,197,[867],&quot;class=css-1gsk3tx&quot;,199,181,[936],&quot;class=chakra-text css-y86brd&quot;,200,181,199,[1072],&quot;aria-orientation=vertical&quot;,&quot;class=chakra-divider css-1kcfwz9&quot;,201,181,200,[867],&quot;class=css-1b5r1qo&quot;,202,181,201,[1072,1189],&quot;class=chakra-divider css-1d23hp7&quot;,203,181,202,[867],&quot;class=css-1xx5azo&quot;,204,182,&quot;svg:line&quot;,&quot;x1=12&quot;,&quot;y1=19&quot;,&quot;x2=12&quot;,&quot;y2=5&quot;,205,182,204,&quot;svg:polyline&quot;,&quot;points=5 12 12 5 19 12&quot;,206,183,[867],&quot;class=css-b93lha&quot;,207,183,206,&quot;BUTTON&quot;,&quot;type=button&quot;,&quot;class=chakra-button css-1azm17w&quot;,208,183,207,[867],&quot;class=css-11wtlra&quot;,209,184,[867,1030],&quot;class=chakra-form-control css-1kxonj9&quot;,210,184,209,[1072,1189],&quot;class=chakra-divider css-vsjy7i&quot;,211,184,210,[867,994],212,185,&quot;A&quot;,&quot;class=chakra-link css-jmtlaa&quot;,&quot;href=/courses&quot;,213,185,212,[1248,1249],&quot;href=/live-courses&quot;,214,185,213,[1248,1249],&quot;href=/test-packages&quot;,215,185,214,[1248,1249],&quot;href=/study-resources&quot;,216,185,215,[1248,1249],&quot;href=/events&quot;,217,186,&quot;LI&quot;,&quot;class=chakra-breadcrumb__list-item css-18biwo&quot;,218,186,217,[1273,1274],219,186,218,[1273,1274],220,188,[867],&quot;class=css-nyy23u&quot;,221,188,220,[867],&quot;class=css-1fh9pnj&quot;,222,189,[936],&quot;class=chakra-text css-4po517&quot;,223,189,222,[936],&quot;class=chakra-text css-1wtukt9&quot;,224,191,[1225,1226],&quot;class=chakra-button css-b1nscp&quot;,225,192,[867],&quot;class=css-18fssg4&quot;,226,192,225,[867],&quot;class=css-j4oitw&quot;,227,192,226,[867],&quot;class=css-1l4w6pd&quot;,228,192,227,[867,1313],229,193,[1123],&quot;srcset=/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FdsLogo.38b0c4da.png&amp;w=3840&amp;q=75 1x&quot;,&quot;src=/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FdsLogo.38b0c4da.png&amp;w=3840&amp;q=75&quot;,&quot;width=2704&quot;,&quot;height=1195&quot;,[1128,1129],&quot;loading=lazy&quot;,&quot;style=color:transparent&quot;,230,194,[867],&quot;class=css-bns4tv&quot;,231,195,[881],&quot;Get the App&quot;,232,196,[867,1107],233,196,232,[867,1144],234,196,233,[867],&quot;class=css-10jxh2o&quot;,235,197,[881],&quot;© Keeron. All rights reserved.&quot;,236,198,[1248],&quot;class=chakra-link css-spn4bz&quot;,&quot;href=/terms-and-conditions&quot;,237,198,236,[1248,1360],&quot;href=/privacy-policy&quot;,238,199,[881],&quot;Pay With&quot;,239,201,[867],&quot;class=css-p9lpxa&quot;,240,201,239,[867,1374],241,201,240,[867,1374],242,201,241,[867,1374],243,201,242,[867,1374],244,201,243,[867,1374],245,201,244,[867,1374],246,201,245,[867,1374],247,201,246,[867,1374],248,201,247,[867,1374],249,201,248,[867,1374],250,201,249,[867,1374],251,201,250,[867,1374],252,201,251,[867,1374],253,201,252,[867,1374],254,201,253,[867,1374],255,201,254,[867,1374],256,201,255,[867,1374],257,201,256,[867,1374],258,201,257,[867,1374],259,201,258,[867,1374],260,201,259,[867,1374],261,201,260,[867,1374],262,201,261,[867,1374],263,201,262,[867,1374],264,201,263,[867,1374],265,201,264,[867,1374],266,201,265,[867,1374],267,201,266,[867,1374],268,201,267,[867,1374],269,201,268,[867,1374],270,203,[881],&quot; &quot;,271,203,270,[1123],&quot;src=/_next/static/media/SSL logo.d8144072.svg&quot;,&quot;width=92&quot;,&quot;height=28&quot;,[1128,1129,1331,1332],272,206,[1092,1093,1094],&quot;stroke-width=0&quot;,&quot;viewBox=0 0 15 15&quot;,&quot;color=brand.400&quot;,&quot;style=color:brand.400&quot;,[1101,1102,1103],273,207,[867],&quot;class=css-zo1lss&quot;,274,208,[1248,1249,1250],275,208,274,[1248,1249,1255],276,208,275,[1248,1249,1260],277,208,276,[881,1498],278,208,277,[1248,1249,1265],279,208,278,[1248,1249,1270],280,209,[867],&quot;class=chakra-input__group css-1oliy19&quot;,&quot;data-group=true&quot;,281,211,[867,994],282,212,[936],&quot;class=chakra-text css-0&quot;,283,213,[936,1553],284,214,[936,1553],285,215,[936,1553],286,216,[936,1553],287,217,[1248],&quot;class=chakra-breadcrumb__link css-1u2cnya&quot;,[29],288,217,287,[931],&quot;role=presentation&quot;,&quot;class=css-syhbcg&quot;,289,218,[1248,1569,1260],290,218,289,[931,1575,1576],291,219,[936],&quot;class=chakra-text css-35ezg3&quot;,292,220,[867],&quot;class=chakra-stack css-8g8ihq&quot;,293,221,[1248],&quot;href=/package-enrollment/70c4e23a-6f11-4a79-808b-3ae6b17ecd86&quot;,294,222,[881],&quot;৳ &quot;,295,222,294,[881],&quot;▫▫▫▫&quot;,296,223,[881,1599],297,223,296,[881,1604],298,224,[881],&quot;Purchase&quot;,299,225,[1123,1326,1327,1328,1329,1128,1129,1331,1332],300,226,[867],&quot;class=css-zm3qx2&quot;,301,227,[867,1622],302,228,[867,1622],303,230,[867],&quot;class=css-1s0llg4&quot;,304,232,[867],&quot;class=css-57k78&quot;,305,232,304,[867],&quot;class=css-4g6ai3&quot;,306,234,[1248],&quot;target=_blank&quot;,&quot;href=${scheme}://www.instagram.com/keeronofficial/&quot;,307,234,306,[1248,1645],&quot;href=${scheme}://www.linkedin.com/company/keeronofficial/&quot;,308,234,307,[1248,1645],&quot;href=${scheme}://www.facebook.com/keeronofficial&quot;,309,234,308,[1248,1645],&quot;href=${scheme}://www.youtube.com/@Keeronofficial&quot;,310,236,[936],&quot;class=chakra-text css-9qu2mc&quot;,311,237,[936],&quot;class=chakra-text css-1081t4c&quot;,312,239,[1123],&quot;src=/_next/static/media/visa.b7440aa8.svg&quot;,&quot;width=28&quot;,&quot;height=20&quot;,[1128,1129,1331,1332],313,240,[1123],&quot;src=/_next/static/media/mastercard.f133c31c.svg&quot;,[1674,1675,1128,1129,1331,1332],314,241,[1123],&quot;src=/_next/static/media/americanexpress.8019e1b3.svg&quot;,[1674,1675,1128,1129,1331,1332],315,242,[1123],&quot;src=/_next/static/media/unionpay.220851e7.svg&quot;,[1674,1675,1128,1129,1331,1332],316,243,[1123],&quot;src=/_next/static/media/round.1e21b633.svg&quot;,[1674,1675,1128,1129,1331,1332],317,244,[1123],&quot;src=/_next/static/media/dbbl.40cb06e2.svg&quot;,[1674,1675,1128,1129,1331,1332],318,245,[1123],&quot;src=/_next/static/media/bkash.f6f6f76b.svg&quot;,[1674,1675,1128,1129,1331,1332],319,246,[1123],&quot;src=/_next/static/media/nagad.2e78eb4c.svg&quot;,[1674,1675,1128,1129,1331,1332],320,247,[1123],&quot;src=/_next/static/media/Rocket.3842ab04.svg&quot;,[1674,1675,1128,1129,1331,1332],321,248,[1123],&quot;src=/_next/static/media/upay.52e674dc.svg&quot;,[1674,1675,1128,1129,1331,1332],322,249,[1123],&quot;src=/_next/static/media/tap.3d6be903.svg&quot;,[1674,1675,1128,1129,1331,1332],323,250,[1123],&quot;src=/_next/static/media/surecash.e739ea9c.svg&quot;,[1674,1675,1128,1129,1331,1332],324,251,[1123],&quot;src=/_next/static/media/islamibankcash.87e93901.svg&quot;,[1674,1675,1128,1129,1331,1332],325,252,[1123],&quot;src=/_next/static/media/mycash.b93bea18.svg&quot;,[1674,1675,1128,1129,1331,1332],326,253,[1123],&quot;src=/_next/static/media/qcash.6ff19a75.svg&quot;,[1674,1675,1128,1129,1331,1332],327,254,[1123],&quot;src=/_next/static/media/fastcash.de393ff5.svg&quot;,[1674,1675,1128,1129,1331,1332],328,255,[1123],&quot;src=/_next/static/media/tapnpay.eea4bc6d.svg&quot;,[1674,1675,1128,1129,1331,1332],329,256,[1123],&quot;src=/_next/static/media/city.5069e278.svg&quot;,[1674,1675,1128,1129,1331,1332],330,257,[1123],&quot;src=/_next/static/media/brac.0f43ed77.svg&quot;,[1674,1675,1128,1129,1331,1332],331,258,[1123],&quot;src=/_next/static/media/bankasia.a86678c9.svg&quot;,[1674,1675,1128,1129,1331,1332],332,259,[1123],&quot;src=/_next/static/media/islamibank.a78f60a0.svg&quot;,[1674,1675,1128,1129,1331,1332],333,260,[1123],&quot;src=/_next/static/media/Ab.e878a74c.svg&quot;,[1674,1675,1128,1129,1331,1332],334,261,[1123],&quot;src=/_next/static/media/mtb.93b6c89c.svg&quot;,[1674,1675,1128,1129,1331,1332],335,262,[1123],&quot;src=/_next/static/media/prime.863ef85d.svg&quot;,[1674,1675,1128,1129,1331,1332],336,263,[1123],&quot;src=/_next/static/media/sb.5cdb3248.svg&quot;,[1674,1675,1128,1129,1331,1332],337,264,[1123],&quot;src=/_next/static/media/firstsecurity.81bbfe43.svg&quot;,[1674,1675,1128,1129,1331,1332],338,265,[1123],&quot;src=/_next/static/media/modhu.4bcdf3c9.svg&quot;,[1674,1675,1128,1129,1331,1332],339,266,[1123],&quot;src=/_next/static/media/walletonebank.569dbaaa.svg&quot;,[1674,1675,1128,1129,1331,1332],340,267,[1123],&quot;src=/_next/static/media/D-money-logo 1.a603c777.svg&quot;,[1674,1675,1128,1129,1331,1332],341,268,[1123],&quot;src=/_next/static/media/islamicwallet.d39cad09.svg&quot;,[1674,1675,1128,1129,1331,1332],342,269,[1123],&quot;src=/_next/static/media/ipay.65f7419a.svg&quot;,[1674,1675,1128,1129,1331,1332],343,272,&quot;svg:path&quot;,&quot;fill-rule=evenodd&quot;,&quot;clip-rule=evenodd&quot;,&quot;d=M1.5 3C1.22386 3 1 3.22386 1 3.5C1 3.77614 1.22386 4 1.5 4H13.5C13.7761 4 14 3.77614 14 3.5C14 3.22386 13.7761 3 13.5 3H1.5ZM1 7.5C1 7.22386 1.22386 7 1.5 7H13.5C13.7761 7 14 7.22386 14 7.5C14 7.77614 13.7761 8 13.5 8H1.5C1.22386 8 1 7.77614 1 7.5ZM1 11.5C1 11.2239 1.22386 11 1.5 11H13.5C13.7761 11 14 11.2239 14 11.5C14 11.7761 13.7761 12 13.5 12H1.5C1.22386 12 1 11.7761 1 11.5Z&quot;,&quot;fill=currentColor&quot;,344,273,[1123,1326,1327,1328,1329,1128,1129,1331,1332],345,274,[936,1553],346,275,[936,1553],347,276,[936,1553],348,278,[936,1553],349,279,[936,1553],350,280,[867],&quot;class=chakra-input__left-element css-1jba83p&quot;,&quot;variant=pill&quot;,351,280,350,&quot;INPUT&quot;,&quot;name=search&quot;,&quot;type=text&quot;,&quot;placeholder=•••••• ••• •••••••&quot;,&quot;id=search&quot;,&quot;class=chakra-input css-ppww4v&quot;,&quot;value=&quot;,352,281,[1225,1226],&quot;class=chakra-button css-htf5rn&quot;,353,282,[881],&quot;All Courses&quot;,354,283,[881],&quot;Live Courses&quot;,355,284,[881],&quot;Test Packages&quot;,356,285,[881],&quot;Study Resources&quot;,357,286,[881],&quot;Events&quot;,358,287,[881],&quot;Home&quot;,359,288,[1092,1093,1833,1510],&quot;viewBox=0 0 512 512&quot;,&quot;color=gray.500&quot;,[1101,1102,1103],360,289,[881],&quot;Packages&quot;,361,290,[1092,1093,1833,1510,1898,1899,1101,1102,1103],362,291,[881],&quot;ABC PACKAGE&quot;,363,292,&quot;H2&quot;,&quot;class=chakra-heading css-smymnf&quot;,364,292,363,[867],&quot;class=sun-editor-editable undefined&quot;,365,293,[867],&quot;class=chakra-card css-1x0qn4c&quot;,[1030],366,300,[1914],&quot;class=chakra-heading css-zsdqtt&quot;,367,300,366,[1248,1360],&quot;href=/about&quot;,368,300,367,[1248,1360],&quot;href=/blogs&quot;,369,300,368,[1248,1360],&quot;href=/contact-us&quot;,370,300,369,[1248,1360],&quot;href=/refund-policy&quot;,371,300,370,[1248,1360],&quot;href=/faq&quot;,372,301,[1914,1929],373,301,372,[1248,1360,1250],374,302,[1914,1929],375,302,374,[1248,1360],&quot;href=/affiliate/landing&quot;,376,303,[867],&quot;class=chakra-accordion css-0&quot;,377,304,[1123],&quot;src=/_next/static/media/google-store.b762da81.svg&quot;,&quot;width=135&quot;,&quot;height=41&quot;,[1128,1129,1331,1332],378,305,[1123],&quot;src=/_next/static/media/apple-store.5e003de7.svg&quot;,[1978,1979,1128,1129,1331,1332],379,306,[867,1030],&quot;class=css-rcn4mf&quot;,380,307,[867,1030,1989],381,308,[867,1030,1989],382,309,[867,1030],&quot;class=css-14j79z9&quot;,383,310,[881],&quot;Terms and conditions&quot;,384,311,[881],&quot;Privacy policy&quot;,385,345,[881,1874],386,346,[881,1878],387,347,[881,1882],388,348,[881,1886],389,349,[881,1890],390,350,[1092,1093,1094,1095,1096,1097,1098,1099],&quot;class=chakra-icon css-12zz35c&quot;,[1101,1102,1103],391,352,[881],&quot;Sign in&quot;,392,359,[1829],&quot;d=M294.1 256L167 129c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.3 34 0L345 239c9.1 9.1 9.3 23.7.7 33.1L201.1 417c-4.7 4.7-10.9 7-17 7s-12.3-2.3-17-7c-9.4-9.4-9.4-24.6 0-33.9l127-127.1z&quot;,393,361,[1829,2035],394,363,[881,1911],395,364,[936],396,365,[867],&quot;class=css-15vqpxh&quot;,397,365,396,[867],&quot;class=css-1czfjlj&quot;,398,366,[881],&quot;Keeron&quot;,399,367,[936],&quot;class=chakra-text css-qyvo1j&quot;,400,368,[936],&quot;class=chakra-text css-4zv6ro&quot;,401,369,[936,2065],402,370,[936,2065],403,371,[936,2065],404,372,[881],&quot;Programs&quot;,405,373,[936,2061],406,374,[881],&quot;More&quot;,407,375,[936,2065],408,376,[867],&quot;class=chakra-accordion__item css-17mg6aq&quot;,409,376,408,[867,2092],410,376,409,[867,2092],411,379,[1092,1093,1833,1510],&quot;viewBox=0 0 1024 1024&quot;,[1099],&quot;class=chakra-icon css-pvs0fu&quot;,[1101,1102,1103],412,380,[1092,1093,1833,1510,2104,1099,2106,1101,1102,1103],413,381,[1092,1093,1833,1510,2104,1099,2106,1101,1102,1103],414,382,[1092,1093,1833,1510,2104,1099,2106,1101,1102,1103],415,390,&quot;svg:circle&quot;,&quot;cx=11&quot;,&quot;cy=11&quot;,&quot;r=8&quot;,416,390,415,[1208],&quot;x1=21&quot;,&quot;y1=21&quot;,&quot;x2=16.65&quot;,&quot;y2=16.65&quot;,417,395,[931],&quot;style=color: rgb(0, 0, 0);font-size: 16px&quot;,418,395,417,[931],&quot;style=color: rgb(0, 0, 0)&quot;,419,395,418,&quot;BR&quot;,420,396,[867],&quot;class=css-5luvp9&quot;,421,397,[867,994],422,397,421,[867],&quot;class=css-22m9ia&quot;,423,399,[881],&quot;About Us&quot;,424,400,[881],&quot;Blog&quot;,425,401,[881],&quot;Contact Us&quot;,426,402,[881],&quot;Refund Policy&quot;,427,403,[881],&quot;FAQ&quot;,428,405,[881],&quot;Courses&quot;,429,407,[881],&quot;Become an Affiliate&quot;,430,408,[1225,1226],&quot;id=accordion-button-:R6laakjdf6:&quot;,&quot;aria-expanded=false&quot;,&quot;aria-controls=accordion-panel-:R6laakjdf6:&quot;,&quot;class=chakra-accordion__button css-uttm9k&quot;,&quot;data-index=0&quot;,431,408,430,[867,1040,1041],432,409,[1225,1226],&quot;id=accordion-button-:Ralaakjdf6:&quot;,[2188],&quot;aria-controls=accordion-panel-:Ralaakjdf6:&quot;,[2190],&quot;data-index=1&quot;,433,409,432,[867,1040,1041],434,410,[1225,1226],&quot;id=accordion-button-:Relaakjdf6:&quot;,[2188],&quot;aria-controls=accordion-panel-:Relaakjdf6:&quot;,[2190],&quot;data-index=2&quot;,435,410,434,[867,1040,1041],436,411,[1829],&quot;d=M512 306.9c-113.5 0-205.1 91.6-205.1 205.1S398.5 717.1 512 717.1 717.1 625.5 717.1 512 625.5 306.9 512 306.9zm0 338.4c-73.4 0-133.3-59.9-133.3-133.3S438.6 378.7 512 378.7 645.3 438.6 645.3 512 585.4 645.3 512 645.3zm213.5-394.6c-26.5 0-47.9 21.4-47.9 47.9s21.4 47.9 47.9 47.9 47.9-21.3 47.9-47.9a47.84 47.84 0 0 0-47.9-47.9zM911.8 512c0-55.2.5-109.9-2.6-165-3.1-64-17.7-120.8-64.5-167.6-46.9-46.9-103.6-61.4-167.6-64.5-55.2-3.1-109.9-2.6-165-2.6-55.2 0-109.9-.5-165 2.6-64 3.1-120.8 17.7-167.6 64.5C132.6 226.3 118.1 283 115 347c-3.1 55.2-2.6 109.9-2.6 165s-.5 109.9 2.6 165c3.1 64 17.7 120.8 64.5 167.6 46.9 46.9 103.6 61.4 167.6 64.5 55.2 3.1 109.9 2.6 165 2.6 55.2 0 109.9.5 165-2.6 64-3.1 120.8-17.7 167.6-64.5 46.9-46.9 61.4-103.6 64.5-167.6 3.2-55.1 2.6-109.8 2.6-165zm-88 235.8c-7.3 18.2-16.1 31.8-30.2 45.8-14.1 14.1-27.6 22.9-45.8 30.2C695.2 844.7 570.3 840 512 840c-58.3 0-183.3 4.7-235.9-16.1-18.2-7.3-31.8-16.1-45.8-30.2-14.1-14.1-22.9-27.6-30.2-45.8C179.3 695.2 184 570.3 184 512c0-58.3-4.7-183.3 16.1-235.9 7.3-18.2 16.1-31.8 30.2-45.8s27.6-22.9 45.8-30.2C328.7 179.3 453.7 184 512 184s183.3-4.7 235.9 16.1c18.2 7.3 31.8 16.1 45.8 30.2 14.1 14.1 22.9 27.6 30.2 45.8C844.7 328.7 840 453.7 840 512c0 58.3 4.7 183.2-16.2 235.8z&quot;,437,412,[1829],&quot;d=M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM349.3 793.7H230.6V411.9h118.7v381.8zm-59.3-434a68.8 68.8 0 1 1 68.8-68.8c-.1 38-30.9 68.8-68.8 68.8zm503.7 434H675.1V608c0-44.3-.8-101.2-61.7-101.2-61.7 0-71.2 48.2-71.2 98v188.9H423.7V411.9h113.8v52.2h1.6c15.8-30 54.5-61.7 112.3-61.7 120.2 0 142.3 79.1 142.3 181.9v209.4z&quot;,438,413,[1829],&quot;d=M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-92.4 233.5h-63.9c-50.1 0-59.8 23.8-59.8 58.8v77.1h119.6l-15.6 120.7h-104V912H539.2V602.2H434.9V481.4h104.3v-89c0-103.3 63.1-159.6 155.3-159.6 44.2 0 82.1 3.3 93.2 4.8v107.9z&quot;,439,414,[1829],&quot;d=M941.3 296.1a112.3 112.3 0 0 0-79.2-79.3C792.2 198 512 198 512 198s-280.2 0-350.1 18.7A112.12 112.12 0 0 0 82.7 296C64 366 64 512 64 512s0 146 18.7 215.9c10.3 38.6 40.7 69 79.2 79.3C231.8 826 512 826 512 826s280.2 0 350.1-18.8c38.6-10.3 68.9-40.7 79.2-79.3C960 658 960 512 960 512s0-146-18.7-215.9zM423 646V378l232 133-232 135z&quot;,440,417,[881],&quot;English language plays an essential role in our lives as it helps in communication. It is the main language for studying any subject all over the world. English is important for students as it broadens their minds, develops emotional skills, improve the quality of life by providing job opportunities.&quot;,441,418,[881],&quot;​&quot;,442,420,[867],&quot;class=css-1svymfu&quot;,443,421,[867],&quot;class=chakra-stack css-o1jcy9&quot;,444,422,[1225,1226],&quot;class=chakra-button css-k6pzyi&quot;,445,430,[931],&quot;class=css-1eziwv&quot;,446,430,445,[1092,1096,1099],&quot;class=chakra-icon chakra-accordion__icon css-186l2rg&quot;,&quot;aria-hidden=true&quot;,447,431,[867,944],&quot;id=accordion-panel-:R6laakjdf6:&quot;,&quot;aria-labelledby=accordion-button-:R6laakjdf6:&quot;,&quot;class=chakra-accordion__panel css-mxa4qn&quot;,448,432,[931,2259],449,432,448,[1092,1096,1099,2264,2265],450,433,[867,944],&quot;id=accordion-panel-:Ralaakjdf6:&quot;,&quot;aria-labelledby=accordion-button-:Ralaakjdf6:&quot;,[2271],451,434,[931,2259],452,434,451,[1092,1096,1099,2264,2265],453,435,[867,944],&quot;id=accordion-panel-:Relaakjdf6:&quot;,&quot;aria-labelledby=accordion-button-:Relaakjdf6:&quot;,[2271],454,442,[1123],&quot;sizes=100vw&quot;,&quot;srcset=${scheme}://selisefalcon.blob.core.windows.net/ecap-falcon/stage/F7A99120-25DE-432A-92CA-9A108A62721C/9a994a77-9aa4-4a75-b5fa-4be467e053a4/75e9b3a0-77f6-4714-82ef-e8c53fa4e926/download (4).jpg?sv=2018-03-28&amp;sr=b&amp;sig=Bgdp%2BJ37w6pdw%2Fm29BCuNQaJP4%2Fru2AKBuhwLYna0A8%3D&amp;se=2024-05-18T09%3A19%3A18Z&amp;sp=r 640w, ${scheme}://selisefalcon.blob.core.windows.net/ecap-falcon/stage/F7A99120-25DE-432A-92CA-9A108A62721C/9a994a77-9aa4-4a75-b5fa-4be467e053a4/75e9b3a0-77f6-4714-82ef-e8c53fa4e926/download (4).jpg?sv=2018-03-28&amp;sr=b&amp;sig=Bgdp%2BJ37w6pdw%2Fm29BCuNQaJP4%2Fru2AKBuhwLYna0A8%3D&amp;se=2024-05-18T09%3A19%3A18Z&amp;sp=r 750w, ${scheme}://selisefalcon.blob.core.windows.net/ecap-falcon/stage/F7A99120-25DE-432A-92CA-9A108A62721C/9a994a77-9aa4-4a75-b5fa-4be467e053a4/75e9b3a0-77f6-4714-82ef-e8c53fa4e926/download (4).jpg?sv=2018-03-28&amp;sr=b&amp;sig=Bgdp%2BJ37w6pdw%2Fm29BCuNQaJP4%2Fru2AKBuhwLYna0A8%3D&amp;se=2024-05-18T09%3A19%3A18Z&amp;sp=r 828w, ${scheme}://selisefalcon.blob.core.windows.net/ecap-falcon/stage/F7A99120-25DE-432A-92CA-9A108A62721C/9a994a77-9aa4-4a75-b5fa-4be467e053a4/75e9b3a0-77f6-4714-82ef-e8c53fa4e926/download (4).jpg?sv=2018-03-28&amp;sr=b&amp;sig=Bgdp%2BJ37w6pdw%2Fm29BCuNQaJP4%2Fru2AKBuhwLYna0A8%3D&amp;se=2024-05-18T09%3A19%3A18Z&amp;sp=r 1080w, ${scheme}://selisefalcon.blob.core.windows.net/ecap-falcon/stage/F7A99120-25DE-432A-92CA-9A108A62721C/9a994a77-9aa4-4a75-b5fa-4be467e053a4/75e9b3a0-77f6-4714-82ef-e8c53fa4e926/download (4).jpg?sv=2018-03-28&amp;sr=b&amp;sig=Bgdp%2BJ37w6pdw%2Fm29BCuNQaJP4%2Fru2AKBuhwLYna0A8%3D&amp;se=2024-05-18T09%3A19%3A18Z&amp;sp=r 1200w, ${scheme}://selisefalcon.blob.core.windows.net/ecap-falcon/stage/F7A99120-25DE-432A-92CA-9A108A62721C/9a994a77-9aa4-4a75-b5fa-4be467e053a4/75e9b3a0-77f6-4714-82ef-e8c53fa4e926/download (4).jpg?sv=2018-03-28&amp;sr=b&amp;sig=Bgdp%2BJ37w6pdw%2Fm29BCuNQaJP4%2Fru2AKBuhwLYna0A8%3D&amp;se=2024-05-18T09%3A19%3A18Z&amp;sp=r 1920w, ${scheme}://selisefalcon.blob.core.windows.net/ecap-falcon/stage/F7A99120-25DE-432A-92CA-9A108A62721C/9a994a77-9aa4-4a75-b5fa-4be467e053a4/75e9b3a0-77f6-4714-82ef-e8c53fa4e926/download (4).jpg?sv=2018-03-28&amp;sr=b&amp;sig=Bgdp%2BJ37w6pdw%2Fm29BCuNQaJP4%2Fru2AKBuhwLYna0A8%3D&amp;se=2024-05-18T09%3A19%3A18Z&amp;sp=r 2048w, ${scheme}://selisefalcon.blob.core.windows.net/ecap-falcon/stage/F7A99120-25DE-432A-92CA-9A108A62721C/9a994a77-9aa4-4a75-b5fa-4be467e053a4/75e9b3a0-77f6-4714-82ef-e8c53fa4e926/download (4).jpg?sv=2018-03-28&amp;sr=b&amp;sig=Bgdp%2BJ37w6pdw%2Fm29BCuNQaJP4%2Fru2AKBuhwLYna0A8%3D&amp;se=2024-05-18T09%3A19%3A18Z&amp;sp=r 3840w&quot;,[1125,1128],&quot;data-nimg=fill&quot;,[1130],&quot;style=position: absolute; height: 100%; width: 100%; inset: 0px; object-fit: fill;&quot;,455,443,[936],&quot;class=chakra-text css-1ayj8ec&quot;,456,443,455,[867],&quot;class=css-7ln7vz&quot;,457,444,[881,1615],458,445,[1914,1929],459,446,[1829,1833],&quot;d=M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z&quot;,460,447,[1248,1360,1934],461,447,460,[1248,1360,1939],462,448,[1914,1929],463,449,[1829,1833,2325],464,450,[1248,1360,1250],465,451,[1914,1929],466,452,[1829,1833,2325],467,453,[1248,1360,1949],468,453,467,[1248,1360,1954],469,455,[881,1911],470,456,[936],&quot;class=chakra-text css-1y7jpv5&quot;,471,456,470,[936],&quot;class=chakra-text css-de8utg&quot;,472,458,[881,2057],473,460,[936],&quot;class=chakra-text css-4h3l2o&quot;,474,461,[936,2373],475,462,[881,2078],476,464,[936,2373],477,465,[881,2085],478,467,[936,2373],479,468,[936,2373],480,470,[881,1599],481,470,480,[881,1604],482,471,[881,1599],483,471,482,[881,1604],484,473,[881,2159],485,474,[881,2163],486,476,[881,2179],487,478,[881,2171],488,479,[881,2175]]]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-47" enabled="true">
              <stringProp name="HTTPSampler.domain">www.facebook.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v18.0/plugins/customerchat.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="app_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">app_id</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="attribution" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">attribution</stringProp>
                    <stringProp name="Argument.value">biz_inbox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="channel" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">channel</stringProp>
                    <stringProp name="Argument.value">${scheme}://staticxx.facebook.com/x/connect/xd_arbiter/?version=46#cb=f81345c5e68d9934a&amp;domain=keeron.selisestage.com&amp;is_canvas=false&amp;origin=${scheme}%3A%2F%2Fkeeron.selisestage.com%2Ffe4329657e5785967&amp;relation=parent.parent</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="container_width" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">container_width</stringProp>
                    <stringProp name="Argument.value">1903</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="current_url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">current_url</stringProp>
                    <stringProp name="Argument.value">${scheme}://${host}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="is_loaded_by_facade" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">is_loaded_by_facade</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="locale" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">locale</stringProp>
                    <stringProp name="Argument.value">en_US</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="log_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">log_id</stringProp>
                    <stringProp name="Argument.value">c35e85a0-c625-48b1-9503-e1909c3f320b</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="page_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">page_id</stringProp>
                    <stringProp name="Argument.value">104043352535894</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="request_time" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">request_time</stringProp>
                    <stringProp name="Argument.value">1723026033958</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sdk" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sdk</stringProp>
                    <stringProp name="Argument.value">joey</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=6</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">iframe</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-46" enabled="true">
              <stringProp name="HTTPSampler.domain">www.facebook.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/plugins/customer_chat/SDK/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="app_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">app_id</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="attribution" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">attribution</stringProp>
                    <stringProp name="Argument.value">biz_inbox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="channel" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">channel</stringProp>
                    <stringProp name="Argument.value">${scheme}://staticxx.facebook.com/x/connect/xd_arbiter/?version=46#cb=f81345c5e68d9934a&amp;domain=keeron.selisestage.com&amp;is_canvas=false&amp;origin=${scheme}%3A%2F%2Fkeeron.selisestage.com%2Ffe4329657e5785967&amp;relation=parent.parent</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="container_width" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">container_width</stringProp>
                    <stringProp name="Argument.value">1903</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="current_url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">current_url</stringProp>
                    <stringProp name="Argument.value">${scheme}://${host}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="event_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">event_name</stringProp>
                    <stringProp name="Argument.value">chat_plugin_sdk_dialog_iframe_create</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="is_loaded_by_facade" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">is_loaded_by_facade</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="loading_time" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">loading_time</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="locale" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">locale</stringProp>
                    <stringProp name="Argument.value">en_US</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="log_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">log_id</stringProp>
                    <stringProp name="Argument.value">c35e85a0-c625-48b1-9503-e1909c3f320b</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="page_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">page_id</stringProp>
                    <stringProp name="Argument.value">104043352535894</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="request_time" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">request_time</stringProp>
                    <stringProp name="Argument.value">1723026033958</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sdk" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sdk</stringProp>
                    <stringProp name="Argument.value">joey</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="suppress_http_code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">suppress_http_code</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-48" enabled="true">
              <stringProp name="HTTPSampler.domain">www.facebook.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/plugins/customer_chat/SDK/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="app_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">app_id</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="attribution" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">attribution</stringProp>
                    <stringProp name="Argument.value">biz_inbox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="channel" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">channel</stringProp>
                    <stringProp name="Argument.value">${scheme}://staticxx.facebook.com/x/connect/xd_arbiter/?version=46#cb=f81345c5e68d9934a&amp;domain=keeron.selisestage.com&amp;is_canvas=false&amp;origin=${scheme}%3A%2F%2Fkeeron.selisestage.com%2Ffe4329657e5785967&amp;relation=parent.parent</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="container_width" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">container_width</stringProp>
                    <stringProp name="Argument.value">1903</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="current_url" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">current_url</stringProp>
                    <stringProp name="Argument.value">${scheme}://${host}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="event_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">event_name</stringProp>
                    <stringProp name="Argument.value">chat_plugin_sdk_dialog_iframe_load</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="is_loaded_by_facade" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">is_loaded_by_facade</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="loading_time" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">loading_time</stringProp>
                    <stringProp name="Argument.value">395</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="locale" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">locale</stringProp>
                    <stringProp name="Argument.value">en_US</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="log_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">log_id</stringProp>
                    <stringProp name="Argument.value">c35e85a0-c625-48b1-9503-e1909c3f320b</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="page_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">page_id</stringProp>
                    <stringProp name="Argument.value">104043352535894</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="request_time" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">request_time</stringProp>
                    <stringProp name="Argument.value">1723026034353</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sdk" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sdk</stringProp>
                    <stringProp name="Argument.value">joey</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="suppress_http_code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">suppress_http_code</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-50" enabled="true">
              <stringProp name="HTTPSampler.domain">r.clarity.ms</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/collect</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;e&quot;:[&quot;0.7.43&quot;,3,1136,6648,&quot;ks96b3hjrc&quot;,&quot;1hko1e2&quot;,&quot;11dlr0f&quot;,1,0,0],&quot;a&quot;:[[2412,2,2,2,204],[2858,2,1,2,204],[1136,4,1,1903,1203,1903,955,0,0,0,0,174,0],[7784,1,4,[&quot;c.clarity.ms&quot;]],[7784,0,2,3126,3,6,4,7,5,3,25,9,28,2088],[7784,36,6,[5663,0,6053,1]]],&quot;p&quot;:[[5663,6,496,140,142,&quot;DIV&quot;,&quot;class= fb_iframe_widget fb_invisible_flow&quot;,&quot;fb-iframe-plugin-query=app_id=&amp;attribution=biz_inbox&amp;container_width=1903&amp;current_url=${scheme}%3A%2F%2Fkeeron.selisestage.com%2Ftest-packages%2Fmath-test-english&amp;is_loaded_by_facade=true&amp;locale=en_US&amp;log_id=c35e85a0-c625-48b1-9503-e1909c3f320b&amp;page_id=104043352535894&amp;request_time=1723026033958&amp;sdk=joey&quot;,497,496,&quot;SPAN&quot;,&quot;style=vertical-align: top; width: 0px; height: 0px; overflow: hidden;&quot;,498,497,&quot;IFRAME&quot;,&quot;name=f498865f52dbd4122&quot;,&quot;width=1000px&quot;,&quot;height=1000px&quot;,&quot;data-testid=fb:customerchat Facebook Social Plugin&quot;,&quot;frameborder=0&quot;,&quot;allowtransparency=true&quot;,&quot;allowfullscreen=true&quot;,&quot;scrolling=no&quot;,&quot;allow=encrypted-media&quot;,&quot;style=border: medium; visibility: hidden;&quot;,&quot;src=${scheme}://www.facebook.com/v18.0/plugins/customerchat.php?app_id=&amp;attribution=biz_inbox&amp;channel=${scheme}%3A%2F%2Fstaticxx.facebook.com%2Fx%2Fconnect%2Fxd_arbiter%2F%3Fversion%3D46%23cb%3Df81345c5e68d9934a%26domain%3Dkeeron.selisestage.com%26is_canvas%3Dfalse%26origin%3Dhttps%253A%252F%252Fkeeron.selisestage.com%252Ffe4329657e5785967%26relation%3Dparent.parent&amp;container_width=1903&amp;current_url=${scheme}%3A%2F%2Fkeeron.selisestage.com%2Ftest-packages%2Fmath-test-english&amp;is_loaded_by_facade=true&amp;locale=en_US&amp;log_id=c35e85a0-c625-48b1-9503-e1909c3f320b&amp;page_id=104043352535894&amp;request_time=1723026033958&amp;sdk=joey&quot;,&quot;*O=true&quot;,499,498,&quot;iframe:HTML&quot;,500,499,&quot;HEAD&quot;,&quot;*B=about://blank&quot;,501,499,500,&quot;BODY&quot;],[6053,6,498,497,&quot;IFRAME&quot;,&quot;name=f498865f52dbd4122&quot;,&quot;width=1000px&quot;,&quot;height=1000px&quot;,&quot;data-testid=fb:customerchat Facebook Social Plugin&quot;,&quot;frameborder=0&quot;,&quot;allowtransparency=true&quot;,&quot;allowfullscreen=true&quot;,&quot;scrolling=no&quot;,&quot;allow=encrypted-media&quot;,&quot;style=border: medium; visibility: hidden;&quot;,&quot;src=${scheme}://www.facebook.com/v18.0/plugins/customerchat.php?app_id=&amp;attribution=biz_inbox&amp;channel=${scheme}%3A%2F%2Fstaticxx.facebook.com%2Fx%2Fconnect%2Fxd_arbiter%2F%3Fversion%3D46%23cb%3Df81345c5e68d9934a%26domain%3Dkeeron.selisestage.com%26is_canvas%3Dfalse%26origin%3Dhttps%253A%252F%252Fkeeron.selisestage.com%252Ffe4329657e5785967%26relation%3Dparent.parent&amp;container_width=1903&amp;current_url=${scheme}%3A%2F%2Fkeeron.selisestage.com%2Ftest-packages%2Fmath-test-english&amp;is_loaded_by_facade=true&amp;locale=en_US&amp;log_id=c35e85a0-c625-48b1-9503-e1909c3f320b&amp;page_id=104043352535894&amp;request_time=1723026033958&amp;sdk=joey&quot;],[6054,6,498,497,&quot;IFRAME&quot;,&quot;name=f498865f52dbd4122&quot;,&quot;width=1000px&quot;,&quot;height=1000px&quot;,&quot;data-testid=fb:customerchat Facebook Social Plugin&quot;,&quot;frameborder=0&quot;,&quot;allowtransparency=true&quot;,&quot;allowfullscreen=true&quot;,&quot;scrolling=no&quot;,&quot;allow=encrypted-media&quot;,&quot;style=border: medium; visibility: visible; width: 0px; height: 0px;&quot;,&quot;src=${scheme}://www.facebook.com/v18.0/plugins/customerchat.php?app_id=&amp;attribution=biz_inbox&amp;channel=${scheme}%3A%2F%2Fstaticxx.facebook.com%2Fx%2Fconnect%2Fxd_arbiter%2F%3Fversion%3D46%23cb%3Df81345c5e68d9934a%26domain%3Dkeeron.selisestage.com%26is_canvas%3Dfalse%26origin%3Dhttps%253A%252F%252Fkeeron.selisestage.com%252Ffe4329657e5785967%26relation%3Dparent.parent&amp;container_width=1903&amp;current_url=${scheme}%3A%2F%2Fkeeron.selisestage.com%2Ftest-packages%2Fmath-test-english&amp;is_loaded_by_facade=true&amp;locale=en_US&amp;log_id=c35e85a0-c625-48b1-9503-e1909c3f320b&amp;page_id=104043352535894&amp;request_time=1723026033958&amp;sdk=joey&quot;]]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">cross-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://keeron.selisestage.com</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="1179605444">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)</stringProp>
          <stringProp name="-88591710">www\.download\.windowsupdate\.com.*</stringProp>
          <stringProp name="1323576868">toolbarqueries\.google\..*</stringProp>
          <stringProp name="1629558731">clients.*\.google.*</stringProp>
          <stringProp name="-1899150273">api\.bing\.com.*</stringProp>
          <stringProp name="305776760">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)[\?;].*</stringProp>
          <stringProp name="1779943373">us\.update\.toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="1815174768">safebrowsing.*\.google\.com.*</stringProp>
          <stringProp name="587935979">g\.msn.*</stringProp>
          <stringProp name="110431874">.*msg\.yahoo\.com.*</stringProp>
          <stringProp name="1206954446">tiles.*\.mozilla\.com.*</stringProp>
          <stringProp name="-1314416226">sqm\.microsoft\.com.*</stringProp>
          <stringProp name="1726898318">geo\.yahoo\.com.*</stringProp>
          <stringProp name="-192420923">.*yimg\.com.*</stringProp>
          <stringProp name="2118375536">www\.google-analytics\.com.*</stringProp>
          <stringProp name="1739087931">http?://self-repair\.mozilla\.org.*</stringProp>
          <stringProp name="805311387">windowsupdate\.microsoft\.com.*</stringProp>
          <stringProp name="-1424663473">.*detectportal\.firefox\.com.*</stringProp>
          <stringProp name="11072252">.*toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="-190610036">.*\.google\.com.*/safebrowsing/.*</stringProp>
          <stringProp name="-958112859">toolbar\.google\.com.*</stringProp>
          <stringProp name="-1279148329">pgq\.yahoo\.com.*</stringProp>
          <stringProp name="-1435252351">toolbar\.avg\.com/.*</stringProp>
          <stringProp name="-576820688">toolbar\.msn\.com.*</stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">4</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">true</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">1</intProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <stringProp name="ProxyControlGui.default_encoding">UTF-8</stringProp>
      </ProxyControl>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">STAGE_KEERON_TEST_PACKAGES_OVERVIEWrecording.xml</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
